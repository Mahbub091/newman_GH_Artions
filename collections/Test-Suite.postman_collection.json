{
	"info": {
		"_postman_id": "6d9064b8-a71b-4a94-b91c-68ce281dc002",
		"name": "Test-Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40015382"
	},
	"item": [
		{
			"name": "User sign in Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"const userAccessToken = jsonData.accessToken;",
							"",
							"if (userAccessToken) {",
							"    pm.environment.set(\"accessToken\", userAccessToken);",
							"    console.log(\"Access token saved:\", userAccessToken);",
							"} else {",
							"    console.error(\"Access token not found in the response.\");",
							"}",
							"",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"accessToken\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"accessToken\"",
							"    ]",
							"}",
							"",
							"pm.test(\"Validating Schema to give proper responses\", () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});",
							"",
							"pm.test(\"Response contains accessToken\", () => {",
							"    pm.expect(jsonData).to.have.property(\"accessToken\").that.is.a(\"string\");",
							"});",
							"",
							"pm.test(\"accessToken is a valid JWT\", () => {",
							"    const accessToken = jsonData.accessToken;",
							"    const jwtParts = accessToken.split('.');",
							"",
							"    pm.expect(jwtParts.length).to.eql(3);",
							"",
							"    try {",
							"        const header = JSON.parse(atob(jwtParts[0]));",
							"        const payload = JSON.parse(atob(jwtParts[1]));",
							"",
							"        pm.expect(payload).to.have.property(\"sub\").that.is.a(\"string\");",
							"        pm.expect(payload).to.have.property(\"username\").that.is.a(\"string\");",
							"        pm.expect(payload).to.have.property(\"email\").that.is.a(\"string\");",
							"        pm.expect(payload).to.have.property(\"role\").that.is.a(\"string\");",
							"        pm.expect(payload).to.have.property(\"iat\").that.is.a(\"number\");",
							"        pm.expect(payload).to.have.property(\"exp\").that.is.a(\"number\");",
							"    } catch (e) {",
							"        pm.expect.fail(\"accessToken is not a valid JWT\");",
							"    }",
							"});",
							"",
							"pm.test(\"accessToken is not expired\", () => {",
							"    const jwtParts = jsonData.accessToken.split('.');",
							"    const payload = JSON.parse(atob(jwtParts[1]));",
							"    const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds",
							"    pm.expect(payload.exp).to.be.greaterThan(currentTime, \"Token is expired\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/auth/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"auth",
						"sign-in"
					]
				}
			},
			"response": [
				{
					"name": "User sign in success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/auth/sign-in",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"auth",
								"sign-in"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}"
				},
				{
					"name": "Invalid UID or password",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/auth/sign-in",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"auth",
								"sign-in"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get users Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"const userId = jsonData[0].id;\r",
							"console.log(userId);\r",
							"pm.environment.set(\"userID\", userId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": [\r",
							"                    \"string\",\r",
							"                    \"null\"\r",
							"                ]\r",
							"            },\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"email\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"isEmailVerified\": {\r",
							"                \"type\": \"boolean\"\r",
							"            },\r",
							"            \"otp\": {\r",
							"                \"type\": [\r",
							"                    \"null\",\r",
							"                    \"string\"\r",
							"                ]\r",
							"            },\r",
							"            \"otpTime\": {\r",
							"                \"type\": [\r",
							"                    \"null\",\r",
							"                    \"string\"\r",
							"                ]\r",
							"            },\r",
							"            \"token\": {\r",
							"                \"type\": [\r",
							"                    \"null\",\r",
							"                    \"string\"\r",
							"                ]\r",
							"            },\r",
							"            \"tokenTime\": {\r",
							"                \"type\": [\r",
							"                    \"null\",\r",
							"                    \"string\"\r",
							"                ]\r",
							"            },\r",
							"            \"googleId\": {\r",
							"                \"type\": [\r",
							"                    \"string\",\r",
							"                    \"null\"\r",
							"                ]\r",
							"            },\r",
							"            \"pictureUrl\": {\r",
							"                \"type\": [\r",
							"                    \"string\",\r",
							"                    \"null\"\r",
							"                ]\r",
							"            },\r",
							"            \"role\": {\r",
							"                \"type\": \"string\",\r",
							"                \"enum\": [\r",
							"                    \"PRIVATE_BETA\"\r",
							"                ]\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"username\",\r",
							"            \"email\",\r",
							"            \"isEmailVerified\",\r",
							"            \"otp\",\r",
							"            \"otpTime\",\r",
							"            \"token\",\r",
							"            \"tokenTime\",\r",
							"            \"googleId\",\r",
							"            \"pictureUrl\",\r",
							"            \"role\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\"\r",
							"        ]\r",
							"    },\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"function validateProperties(object, index) {\r",
							"    const context = JSON.stringify(object, null, 2); // stringify the object for detailed error context\r",
							"\r",
							"    pm.test(`Object at index ${index} - Validate properties`, () => {\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('id').that.is.a('string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('name').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('username').that.is.a('string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('email').that.is.a('string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('isEmailVerified').that.is.a('boolean');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('otp').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('otpTime').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('token').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('tokenTime').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('googleId').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('pictureUrl').that.satisfies(val => val === null || typeof val === 'string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('role').that.is.a('string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('createdAt').that.is.a('string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('updatedAt').that.is.a('string');\r",
							"        pm.expect(object, `Object context: ${context}`).to.have.property('deletedAt').that.satisfies(val => val === null || typeof val === 'string');\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(jsonData, \"Response should be an array\").to.be.an('array');\r",
							"});\r",
							"\r",
							"jsonData.forEach((object, index) => validateProperties(object, index));\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users"
					]
				},
				"description": "Get users"
			},
			"response": [
				{
					"name": "Users get successfully",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create a new project_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let newCreatedProjectId = jsonData.id;\r",
							"console.log(newCreatedProjectId);\r",
							"pm.environment.set(\"newProId\", newCreatedProjectId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"graphState\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"additionalItems\": false\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"userId\",\r",
							"        \"name\",\r",
							"        \"graphState\",\r",
							"        \"description\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate root-level properties\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"userId\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"graphState\").that.is.an(\"array\");\r",
							"    pm.expect(jsonData).to.have.property(\"description\");\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific property values\", () => {\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\").that.is.not.empty;\r",
							"    pm.expect(jsonData.userId).to.be.a(\"string\").that.is.not.empty;\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.graphState).to.include.members([\"entity\", \"relation\"]);\r",
							"    pm.expect(jsonData.description).to.be.a(\"string\").that.is.not.empty;\r",
							"    pm.expect(jsonData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData.deletedAt).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate graphState elements\", () => {\r",
							"    jsonData.graphState.forEach((state, index) => {\r",
							"        pm.expect(state).to.be.oneOf([\"entity\", \"relation\"]); // Allowed values\r",
							"        console.log(`Graph State ${index + 1}:`, state);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomUserName}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"graphState\": [\n        \"entity\",\n        \"relation\",\n        \"entity\"\n    ]\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/projects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects"
					]
				},
				"description": "Endpoint to create a new project"
			},
			"response": [
				{
					"name": "Project created successfully",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"graphState\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"graphState\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get all projects_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let projectId = jsonData.projects[0].id;\r",
							"console.log(projectId);\r",
							"\r",
							"// pm.environment.set(\"projectId\", projectId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"projects\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"userId\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"enum\": [\r",
							"                            \"1e7d6ef0-ffb1-40c9-9b71-ab27fb476343\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"graphState\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"type\": [\r",
							"                                \"array\",\r",
							"                                \"string\"\r",
							"                            ],\r",
							"                            \"items\": {\r",
							"                                \"type\": [\r",
							"                                    \"integer\",\r",
							"                                    \"number\"\r",
							"                                ]\r",
							"                            },\r",
							"                            \"additionalItems\": true\r",
							"                        },\r",
							"                        \"additionalItems\": true\r",
							"                    },\r",
							"                    \"description\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"createdAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"updatedAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"deletedAt\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"user\": {\r",
							"                        \"type\": \"object\",\r",
							"                        \"properties\": {\r",
							"                            \"name\": {\r",
							"                                \"type\": \"null\"\r",
							"                            },\r",
							"                            \"username\": {\r",
							"                                \"type\": \"string\",\r",
							"                                \"enum\": [\r",
							"                                    \"test-account\"\r",
							"                                ]\r",
							"                            }\r",
							"                        },\r",
							"                        \"additionalProperties\": false,\r",
							"                        \"required\": [\r",
							"                            \"name\",\r",
							"                            \"username\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"collaborators\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"items\": {},\r",
							"                            \"additionalItems\": true,\r",
							"                            \"additionalProperties\": false\r",
							"                        },\r",
							"                        \"additionalItems\": true\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"userId\",\r",
							"                    \"name\",\r",
							"                    \"graphState\",\r",
							"                    \"description\",\r",
							"                    \"createdAt\",\r",
							"                    \"updatedAt\",\r",
							"                    \"deletedAt\",\r",
							"                    \"user\",\r",
							"                    \"collaborators\"\r",
							"                ]\r",
							"            },\r",
							"            \"additionalItems\": true\r",
							"        },\r",
							"        \"sharedProjects\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"userId\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"graphState\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"items\": {},\r",
							"                            \"additionalItems\": true,\r",
							"                            \"additionalProperties\": false\r",
							"                        },\r",
							"                        \"additionalItems\": true\r",
							"                    },\r",
							"                    \"description\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"createdAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"updatedAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"deletedAt\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"user\": {\r",
							"                        \"type\": \"object\",\r",
							"                        \"properties\": {\r",
							"                            \"name\": {\r",
							"                                \"type\": \"string\"\r",
							"                            },\r",
							"                            \"username\": {\r",
							"                                \"type\": \"string\"\r",
							"                            },\r",
							"                            \"email\": {\r",
							"                                \"type\": \"string\"\r",
							"                            }\r",
							"                        },\r",
							"                        \"additionalProperties\": false,\r",
							"                        \"required\": [\r",
							"                            \"name\",\r",
							"                            \"username\",\r",
							"                            \"email\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"collaborators\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"type\": \"object\",\r",
							"                            \"properties\": {\r",
							"                                \"collaboratorId\": {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                \"projectId\": {\r",
							"                                    \"type\": \"string\",\r",
							"                                    \"enum\": [\r",
							"                                        \"92de5cd8-e50f-4ebf-8555-1293b3139414\"\r",
							"                                    ]\r",
							"                                },\r",
							"                                \"role\": {\r",
							"                                    \"type\": \"string\",\r",
							"                                    \"enum\": [\r",
							"                                        \"VIEWER\"\r",
							"                                    ]\r",
							"                                },\r",
							"                                \"createdAt\": {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                \"updatedAt\": {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                \"deletedAt\": {\r",
							"                                    \"type\": \"null\"\r",
							"                                },\r",
							"                                \"user\": {\r",
							"                                    \"type\": \"object\",\r",
							"                                    \"properties\": {\r",
							"                                        \"email\": {\r",
							"                                            \"type\": \"string\"\r",
							"                                        }\r",
							"                                    },\r",
							"                                    \"additionalProperties\": false,\r",
							"                                    \"required\": [\r",
							"                                        \"email\"\r",
							"                                    ]\r",
							"                                }\r",
							"                            },\r",
							"                            \"additionalProperties\": false,\r",
							"                            \"required\": [\r",
							"                                \"collaboratorId\",\r",
							"                                \"projectId\",\r",
							"                                \"role\",\r",
							"                                \"createdAt\",\r",
							"                                \"updatedAt\",\r",
							"                                \"deletedAt\",\r",
							"                                \"user\"\r",
							"                            ]\r",
							"                        },\r",
							"                        \"additionalItems\": true\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"userId\",\r",
							"                    \"name\",\r",
							"                    \"graphState\",\r",
							"                    \"description\",\r",
							"                    \"createdAt\",\r",
							"                    \"updatedAt\",\r",
							"                    \"deletedAt\",\r",
							"                    \"user\",\r",
							"                    \"collaborators\"\r",
							"                ]\r",
							"            },\r",
							"            \"additionalItems\": true\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"projects\",\r",
							"        \"sharedProjects\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate projects array exists and is not empty\", function () {\r",
							"    pm.expect(jsonData.projects).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"let expectedKeys = [\r",
							"    \"id\",\r",
							"    \"userId\",\r",
							"    \"name\",\r",
							"    \"graphState\",\r",
							"    \"description\",\r",
							"    \"createdAt\",\r",
							"    \"updatedAt\",\r",
							"    \"deletedAt\",\r",
							"    \"user\",\r",
							"    \"collaborators\"\r",
							"];\r",
							"\r",
							"jsonData.projects.forEach((project, index) => {\r",
							"    pm.test(`Validate keys for project at index ${index}`, function () {\r",
							"        expectedKeys.forEach(key => {\r",
							"            pm.expect(project).to.have.property(key);\r",
							"        });\r",
							"    });\r",
							"\r",
							"    pm.test(`Validate values for project at index ${index}`, function () {\r",
							"        pm.expect(project.id).to.be.a(\"string\").and.not.empty;\r",
							"        pm.expect(project.userId).to.be.a(\"string\").and.not.empty;\r",
							"        pm.expect(project.name).to.be.a(\"string\").and.not.empty;\r",
							"        pm.expect(project.graphState).to.be.an(\"array\");\r",
							"        pm.expect(project.description).to.be.a(\"string\").and.not.empty;\r",
							"        pm.expect(project.createdAt).to.be.a(\"string\").and.satisfy(date => !isNaN(new Date(date)));\r",
							"        pm.expect(project.updatedAt).to.be.a(\"string\").and.satisfy(date => !isNaN(new Date(date)));\r",
							"        pm.expect(project.deletedAt).to.satisfy(value => value === null || typeof value === \"string\");\r",
							"\r",
							"        pm.expect(project.user).to.be.an(\"object\");\r",
							"        pm.expect(project.user).to.have.property(\"name\");\r",
							"        pm.expect(project.user).to.have.property(\"username\");\r",
							"        pm.expect(project.user.username).to.be.a(\"string\").and.not.empty;\r",
							"\r",
							"        pm.expect(project.collaborators).to.be.an(\"array\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Validate sharedProjects array exists and is empty\", function () {\r",
							"    pm.expect(jsonData.sharedProjects).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/projects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects"
					]
				},
				"description": "Endpoint to retrieve all projects"
			},
			"response": [
				{
					"name": "Projects retrieved successfully",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Project_Status_Manager_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"type\": {\r",
							"                \"type\": \"string\",\r",
							"                \"enum\": [\r",
							"                    \"file\",\r",
							"                    \"line\"\r",
							"                ]\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\",\r",
							"            },\r",
							"            \"projectId\": {\r",
							"                \"type\": \"string\",\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\",\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"type\",\r",
							"            \"createdAt\",\r",
							"            \"projectId\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\"\r",
							"        ]\r",
							"    },\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"All objects have the same properties and values are unique where required\", () => {\r",
							"    const firstObjectKeys = Object.keys(jsonData[0]);\r",
							"    jsonData.forEach((obj, index) => {\r",
							"        pm.expect(Object.keys(obj)).to.eql(firstObjectKeys, `Object at index ${index} does not have the same keys`);\r",
							"    });\r",
							"\r",
							"    const fieldsToCheckUniqueness = [\"id\"];\r",
							"\r",
							"    fieldsToCheckUniqueness.forEach((field) => {\r",
							"        const fieldValues = jsonData.map(obj => obj[field]);\r",
							"        const uniqueFieldValues = [...new Set(fieldValues)];\r",
							"        pm.expect(fieldValues.length).to.eql(uniqueFieldValues.length, `${field} values are not unique`);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"jsonData.forEach((item, index) => {\r",
							"    pm.test(`Validate item at index ${index}`, () => {\r",
							"        // Validate required properties\r",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(item).to.have.property(\"type\").that.is.oneOf([\"file\", \"line\"]);\r",
							"        pm.expect(item).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/); // ISO 8601\r",
							"        pm.expect(item).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/); // ISO 8601\r",
							"        pm.expect(item).to.have.property(\"projectId\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(item).to.have.property(\"deletedAt\").that.is.null; // Ensure deletedAt is null\r",
							"\r",
							"        // Log validated item\r",
							"        console.log(`Validated item at index ${index}:`, item);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"All IDs are unique\", () => {\r",
							"    const ids = jsonData.map(item => item.id);\r",
							"    const uniqueIds = [...new Set(ids)];\r",
							"    pm.expect(ids.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'file' and 'line' types\", () => {\r",
							"    const types = jsonData.map(item => item.type);\r",
							"    pm.expect(types).to.include(\"file\");\r",
							"    pm.expect(types).to.include(\"line\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains specific names\", () => {\r",
							"    const names = jsonData.map(item => item.name);\r",
							"    pm.expect(names).to.include(\"not_started\");\r",
							"    pm.expect(names).to.include(\"in_work\");\r",
							"    pm.expect(names).to.include(\"final_quality_check\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"statuses\": [\r\n    {\r\n      \"id\": \"0cda8401-1a60-4fec-87bf-8f7578685cbd\",\r\n      \"name\": \"not_started\",\r\n      \"type\": \"file\",\r\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\r\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\r\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\r\n      \"deletedAt\": null\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id/status-manager/:type",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id",
						"status-manager",
						":type"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						},
						{
							"key": "type",
							"value": "file",
							"description": "(Required)  Status: File|Line"
						}
					]
				},
				"description": "Endpoint to add collaborators to a project by project ID\n\nStatus to pass in body section:\n\n``` json\n{\n  \"statuses\": [\n    {\n      \"id\": \"0cda8401-1a60-4fec-87bf-8f7578685cbd\",\n      \"name\": \"not_started\",\n      \"type\": \"file\",\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\n      \"deletedAt\": null\n    },\n    {\n      \"id\": \"060ce3be-da41-4251-a980-7cc09ed4cb23\",\n      \"name\": \"in_work\",\n      \"type\": \"file\",\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\n      \"deletedAt\": null\n    },\n    {\n      \"id\": \"e57c298e-186c-4108-acdb-546ce56cba16\",\n      \"name\": \"issue\",\n      \"type\": \"file\",\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\n      \"deletedAt\": null\n    },\n    {\n      \"id\": \"dd29be62-ac9b-4620-9e24-098618f23121\",\n      \"name\": \"complete\",\n      \"type\": \"file\",\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\n      \"deletedAt\": null\n    },\n    {\n      \"id\": \"721536a7-4ed3-4b9c-a5d3-708b8f0ebad4\",\n      \"name\": \"merging\",\n      \"type\": \"file\",\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\n      \"deletedAt\": null\n    },\n    {\n      \"id\": \"c01fdb2e-3cb0-46f7-943c-9d102fa6c7cf\",\n      \"name\": \"final_quality_check\",\n      \"type\": \"file\",\n      \"createdAt\": \"2024-11-27T03:59:47.599Z\",\n      \"projectId\": \"ecd8119a-0668-47a1-904d-15b91844182b\",\n      \"updatedAt\": \"2024-11-27T03:59:47.599Z\",\n      \"deletedAt\": null\n    },\n    {\n      \"name\": \"Hello\",\n      \"type\": \"file\"\n    }\n  ]\n}\n ```"
			},
			"response": [
				{
					"name": "Collaborators added successfully",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/status-manager/:type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"status-manager",
								":type"
							],
							"variable": [
								{
									"key": "id"
								},
								{
									"key": "type"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "An error occurred while adding collaborators",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/status-manager/:type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"status-manager",
								":type"
							],
							"variable": [
								{
									"key": "id"
								},
								{
									"key": "type"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Project not found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/status-manager/:type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"status-manager",
								":type"
							],
							"variable": [
								{
									"key": "id"
								},
								{
									"key": "type"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Upload a new PDF file Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let knowledgeFile = jsonData.id;\r",
							"var flagId = jsonData.flagId;\r",
							"console.log(flagId);\r",
							"pm.environment.set(\"flagId\", flagId);\r",
							"pm.environment.set(\"knowledgeFileId\", knowledgeFile);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"fileLabels\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"filePath\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"abstract\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"flagId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"fileExt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"pageNo\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"doi\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"metaData\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"fileName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"graphs\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"tables\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"plots\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"equations\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"keypoints\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"summary\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"title\",\r",
							"                \"fileName\",\r",
							"                \"graphs\",\r",
							"                \"tables\",\r",
							"                \"plots\",\r",
							"                \"equations\",\r",
							"                \"keypoints\",\r",
							"                \"summary\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"fileLabels\",\r",
							"        \"filePath\",\r",
							"        \"abstract\",\r",
							"        \"flagId\",\r",
							"        \"fileExt\",\r",
							"        \"pageNo\",\r",
							"        \"status\",\r",
							"        \"doi\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"metaData\"\r",
							"    ]\r",
							"}\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate main object properties\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"fileLabels\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"filePath\").that.is.a(\"string\").and.contains(\"knowledge-files\");\r",
							"    pm.expect(jsonData).to.have.property(\"abstract\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"flagId\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"fileExt\").that.is.a(\"string\").and.equals(\"pdf\");\r",
							"    pm.expect(jsonData).to.have.property(\"pageNo\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\").and.is.oneOf([\"not_started\", \"in_progress\", \"completed\"]);\r",
							"    pm.expect(jsonData).to.have.property(\"doi\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"metaData\").that.is.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate metaData properties\", () => {\r",
							"    const metaData = jsonData.metaData;\r",
							"    pm.expect(metaData).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(metaData).to.have.property(\"title\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(metaData).to.have.property(\"fileName\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(metaData).to.have.property(\"graphs\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"tables\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"plots\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"equations\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"keypoints\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"summary\").that.is.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "projectId",
							"value": "{{newProId}}",
							"description": "(Required) ",
							"type": "text"
						},
						{
							"key": "fileId",
							"value": "",
							"description": "(Required) ",
							"type": "text",
							"disabled": true
						},
						{
							"key": "flagId",
							"value": "test",
							"description": "(Required) ",
							"type": "text",
							"disabled": true
						},
						{
							"key": "customTitle",
							"value": "test_QA",
							"description": "(Required) ",
							"type": "text"
						},
						{
							"key": "file",
							"value": "{{filePath}}",
							"description": "(Required) ",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/v1/knowledge-files/upload",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"knowledge-files",
						"upload"
					]
				},
				"description": "Endpoint to upload a new PDF file for a knowledge file"
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "projectId",
									"value": "<string>",
									"description": "(Required) ",
									"type": "text"
								},
								{
									"key": "fileId",
									"value": "<string>",
									"description": "(Required) ",
									"type": "text"
								},
								{
									"key": "flagId",
									"value": "<string>",
									"description": "(Required) ",
									"type": "text"
								},
								{
									"key": "customTitle",
									"value": "<string>",
									"description": "(Required) ",
									"type": "text"
								},
								{
									"key": "file",
									"description": "(Required) ",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/v1/knowledge-files/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"knowledge-files",
								"upload"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "upload Supplement Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let supplementFileId = jsonData.id;\r",
							"console.log(supplementFileId);\r",
							"pm.environment.set(\"supplementFileId\", supplementFileId);\r",
							"\r",
							"let paperFlagId = jsonData.paperFlagId;\r",
							"console.log(paperFlagId);\r",
							"pm.environment.set(\"paperFlagId\", paperFlagId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"filePath\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"flagId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"fileExt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"customTitle\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"paperFlagId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"filePath\",\r",
							"        \"flagId\",\r",
							"        \"fileExt\",\r",
							"        \"status\",\r",
							"        \"customTitle\",\r",
							"        \"paperFlagId\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response properties\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"filePath\").that.is.a(\"string\").and.contains(\"knowledge-files\");\r",
							"    pm.expect(jsonData).to.have.property(\"flagId\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"fileExt\").that.is.a(\"string\").and.equals(\"pdf\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\").and.is.oneOf([\"null\", \"not_started\", \"in_progress\", \"completed\"]);\r",
							"    pm.expect(jsonData).to.have.property(\"customTitle\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"paperFlagId\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null; // Should be null\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "projectId",
							"value": "{{newProId}}",
							"type": "text"
						},
						{
							"key": "customTitle",
							"value": "Test_User_Supplement",
							"type": "text"
						},
						{
							"key": "flagId",
							"value": "{{flagId}}",
							"type": "text"
						},
						{
							"key": "file",
							"value": "{{filePath}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/v1/knowledge-files/upload-supplement",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"knowledge-files",
						"upload-supplement"
					]
				}
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/knowledge-files/upload-supplement",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"knowledge-files",
								"upload-supplement"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create a new type Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let typeId = jsonData.id;\r",
							"\r",
							"console.log(typeId);\r",
							"pm.environment.set(\"typeId\", typeId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"typeName\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"typeName\",\r",
							"        \"id\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response properties\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"typeName\").that.is.a(\"string\").and.equals(\"plot\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null; // Should be null\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"typeName\": \"plot\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/create-type",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"create-type"
					]
				}
			},
			"response": [
				{
					"name": "Type successfully created.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"typeName\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/create-type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"create-type"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{}"
				},
				{
					"name": "Bad request.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"typeName\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/create-type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"create-type"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get all types Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let typeId = jsonData[0].id;\r",
							"\r",
							"console.log(typeId);\r",
							"pm.environment.set(\"typeId\", typeId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"typeName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"typeName\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\"\r",
							"        ]\r",
							"    },\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item in the array has a valid schema\", function () {\r",
							"    jsonData.forEach((item, index) => {\r",
							"        pm.test(`Item ${index + 1} - typeName is valid`, function () {\r",
							"            pm.expect(item.typeName).to.be.a(\"string\");\r",
							"        });\r",
							"\r",
							"        pm.test(`Item ${index + 1} - createdAt is a valid date`, function () {\r",
							"            pm.expect(new Date(item.createdAt).toString()).not.to.equal(\"Invalid Date\");\r",
							"        });\r",
							"\r",
							"        pm.test(`Item ${index + 1} - updatedAt is a valid date`, function () {\r",
							"            pm.expect(new Date(item.updatedAt).toString()).not.to.equal(\"Invalid Date\");\r",
							"        });\r",
							"\r",
							"        pm.test(`Item ${index + 1} - deletedAt is null or a valid date`, function () {\r",
							"            if (item.deletedAt !== null) {\r",
							"                pm.expect(new Date(item.deletedAt).toString()).not.to.equal(\"Invalid Date\");\r",
							"            } else {\r",
							"                pm.expect(item.deletedAt).to.be.null;\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/types",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"types"
					]
				}
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/types",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"types"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create a new table structure Copy__Done",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let tableId = jsonData.id;\r",
							"console.log(tableId);\r",
							"\r",
							"pm.environment.set(\"tableId\", tableId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"tableName\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"projectId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"typeId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"isEditable\": {\r",
							"            \"type\": \"boolean\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"oldId\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"columns\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"id\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"name\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"type\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"order\": {\r",
							"                            \"type\": \"integer\"\r",
							"                        },\r",
							"                        \"cHeader\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"description\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"dType\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"cType\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"createdAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"updatedAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"deletedAt\": {\r",
							"                            \"type\": \"null\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"additionalProperties\": false,\r",
							"                    \"required\": [\r",
							"                        \"id\",\r",
							"                        \"name\",\r",
							"                        \"type\",\r",
							"                        \"order\",\r",
							"                        \"cHeader\",\r",
							"                        \"description\",\r",
							"                        \"dType\",\r",
							"                        \"cType\",\r",
							"                        \"createdAt\",\r",
							"                        \"updatedAt\",\r",
							"                        \"deletedAt\"\r",
							"                    ]\r",
							"                }\r",
							"            ],\r",
							"            \"additionalItems\": false\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"tableName\",\r",
							"        \"projectId\",\r",
							"        \"typeId\",\r",
							"        \"isEditable\",\r",
							"        \"status\",\r",
							"        \"oldId\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"columns\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate root-level properties\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"tableName\").that.is.a(\"string\").and.equals(\"QA_Test_Table\");\r",
							"    pm.expect(jsonData).to.have.property(\"projectId\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"typeId\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"isEditable\").that.is.a(\"boolean\").and.is.true;\r",
							"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"active\");\r",
							"    pm.expect(jsonData).to.have.property(\"oldId\").that.is.null; // Should be null\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null; // Should be null\r",
							"    pm.expect(jsonData).to.have.property(\"columns\").that.is.an(\"array\");\r",
							"});\r",
							"\r",
							"if (jsonData.columns && jsonData.columns.length > 0) {\r",
							"    jsonData.columns.forEach((column, index) => {\r",
							"        pm.test(`Validate column ${index + 1}`, () => {\r",
							"            pm.expect(column).to.be.an(\"object\");\r",
							"            pm.expect(column).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"            pm.expect(column).to.have.property(\"name\").that.is.a(\"string\").and.equals(\"ColumnName\");\r",
							"            pm.expect(column).to.have.property(\"type\").that.is.a(\"string\").and.equals(\"string\");\r",
							"            pm.expect(column).to.have.property(\"order\").that.is.a(\"number\").and.equals(1);\r",
							"            pm.expect(column).to.have.property(\"cHeader\").that.is.a(\"string\").and.equals(\"string\");\r",
							"            pm.expect(column).to.have.property(\"description\").that.is.a(\"string\").and.equals(\"string\");\r",
							"            pm.expect(column).to.have.property(\"dType\").that.is.a(\"string\").and.equals(\"string\");\r",
							"            pm.expect(column).to.have.property(\"cType\").that.is.a(\"string\").and.equals(\"string\");\r",
							"            pm.expect(column).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"            pm.expect(column).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"            pm.expect(column).to.have.property(\"deletedAt\").that.is.null;\r",
							"        });\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Columns array is empty\", () => {\r",
							"        pm.expect(response.columns).to.be.an(\"array\").and.to.be.empty;\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tableName\": \"QA_Test_Table\",\r\n  \"projectId\": \"{{newProId}}\",\r\n  \"typeId\": \"{{typeId}}\", \r\n  \"isEditable\": true,\r\n  \"status\": \"active\",\r\n  \"columns\": [\r\n    {\r\n      \"id\": \"string\",\r\n      \"name\": \"ColumnName\",\r\n      \"type\": \"string\",\r\n      \"cHeader\": \"string\",\r\n      \"description\": \"string\",\r\n      \"dType\": \"string\",\r\n      \"order\": 1,\r\n      \"cType\": \"string\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/create-table-definition",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"create-table-definition"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new extraction Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const idValue = jsonData.id;\r",
							"pm.environment.set(\"extractionId\", idValue);\r",
							"console.log(\"ID value set as environment variable:\", idValue);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"fileId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"tableId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"figure\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"imageUrls\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": true\r",
							"        },\r",
							"        \"coordinates\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"labels\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"fileId\",\r",
							"        \"tableId\",\r",
							"        \"status\",\r",
							"        \"figure\",\r",
							"        \"imageUrls\",\r",
							"        \"coordinates\",\r",
							"        \"labels\",\r",
							"        \"id\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields with correct types\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"fileId\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"tableId\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"figure\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"imageUrls\").that.is.an(\"array\");\r",
							"    pm.expect(jsonData).to.have.property(\"coordinates\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"labels\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Coordinates is a valid JSON object\", () => {\r",
							"    let coordinates;\r",
							"    try {\r",
							"        coordinates = JSON.parse(jsonData.coordinates);\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Coordinates field is not a valid JSON object\");\r",
							"    }\r",
							"    pm.expect(coordinates).to.be.an(\"object\");\r",
							"    pm.expect(coordinates).to.have.property(\"x\").that.is.a(\"number\");\r",
							"    pm.expect(coordinates).to.have.property(\"y\").that.is.a(\"number\");\r",
							"    pm.expect(coordinates).to.have.property(\"width\").that.is.a(\"number\");\r",
							"    pm.expect(coordinates).to.have.property(\"height\").that.is.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"createdAt and updatedAt are valid ISO 8601 timestamps\", () => {\r",
							"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
							"    pm.expect(jsonData.createdAt).to.match(iso8601Regex);\r",
							"    pm.expect(jsonData.updatedAt).to.match(iso8601Regex);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"fileId\", jsonData.fileId);\r",
							"pm.environment.set(\"tableId\", jsonData.tableId);\r",
							"\r",
							"pm.test(\"Status is one of the expected values\", () => {\r",
							"    const validStatuses = [\"processing\", \"completed\", \"failed\"];\r",
							"    pm.expect(validStatuses).to.include(jsonData.status);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "tableId",
							"value": "{{tableId}}",
							"description": "UUID of the table associated with the extraction",
							"type": "text"
						},
						{
							"key": "fileId",
							"value": "{{knowledgeFileId}}",
							"description": "UUID of the file associated with the extraction",
							"type": "text"
						},
						{
							"key": "status",
							"value": "processing",
							"description": "Current status of the extraction (This can only be one of pending,processing,completed,failed)",
							"type": "text"
						},
						{
							"key": "figure",
							"value": "1",
							"description": "Figure number or description (optional)",
							"type": "text"
						},
						{
							"key": "coordinates",
							"value": "{\"x\": 100, \"y\": 100, \"width\": 50, \"height\": 500}",
							"description": "JSON string of the coordinates related to the extraction",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/create-extraction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"create-extraction"
					]
				}
			},
			"response": [
				{
					"name": "Extraction successfully created.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Binary file data for extraction",
									"type": "file",
									"src": []
								},
								{
									"key": "tableId",
									"value": "<uuid>",
									"description": "UUID of the table associated with the extraction",
									"type": "text"
								},
								{
									"key": "fileId",
									"value": "<uuid>",
									"description": "UUID of the file associated with the extraction",
									"type": "text"
								},
								{
									"key": "status",
									"value": "pending",
									"description": "Current status of the extraction (This can only be one of pending,processing,completed,failed)",
									"type": "text"
								},
								{
									"key": "figure",
									"value": "<string>",
									"description": "Figure number or description (optional)",
									"type": "text"
								},
								{
									"key": "imageUrl",
									"value": "<string>",
									"description": "URL of the associated image (optional)",
									"type": "text"
								},
								{
									"key": "pageImageUrl",
									"value": "<string>",
									"description": "URL of the page image (optional)",
									"type": "text"
								},
								{
									"key": "coordinates",
									"value": "<string>",
									"description": "JSON string of the coordinates related to the extraction",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/create-extraction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"create-extraction"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<uuid>\",\n  \"tableId\": \"<uuid>\",\n  \"fileId\": \"<uuid>\",\n  \"status\": \"<string>\",\n  \"figure\": \"<string>\",\n  \"imageUrl\": \"<string>\",\n  \"pageImageUrl\": \"<string>\",\n  \"coordinates\": {},\n  \"createdAt\": \"<dateTime>\"\n}"
				},
				{
					"name": "Invalid input data.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Binary file data for extraction",
									"type": "file",
									"src": []
								},
								{
									"key": "tableId",
									"value": "<uuid>",
									"description": "UUID of the table associated with the extraction",
									"type": "text"
								},
								{
									"key": "fileId",
									"value": "<uuid>",
									"description": "UUID of the file associated with the extraction",
									"type": "text"
								},
								{
									"key": "status",
									"value": "pending",
									"description": "Current status of the extraction (This can only be one of pending,processing,completed,failed)",
									"type": "text"
								},
								{
									"key": "figure",
									"value": "<string>",
									"description": "Figure number or description (optional)",
									"type": "text"
								},
								{
									"key": "imageUrl",
									"value": "<string>",
									"description": "URL of the associated image (optional)",
									"type": "text"
								},
								{
									"key": "pageImageUrl",
									"value": "<string>",
									"description": "URL of the page image (optional)",
									"type": "text"
								},
								{
									"key": "coordinates",
									"value": "<string>",
									"description": "JSON string of the coordinates related to the extraction",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/create-extraction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"create-extraction"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Unauthorized access.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Binary file data for extraction",
									"type": "file",
									"src": []
								},
								{
									"key": "tableId",
									"value": "<uuid>",
									"description": "UUID of the table associated with the extraction",
									"type": "text"
								},
								{
									"key": "fileId",
									"value": "<uuid>",
									"description": "UUID of the file associated with the extraction",
									"type": "text"
								},
								{
									"key": "status",
									"value": "pending",
									"description": "Current status of the extraction (This can only be one of pending,processing,completed,failed)",
									"type": "text"
								},
								{
									"key": "figure",
									"value": "<string>",
									"description": "Figure number or description (optional)",
									"type": "text"
								},
								{
									"key": "imageUrl",
									"value": "<string>",
									"description": "URL of the associated image (optional)",
									"type": "text"
								},
								{
									"key": "pageImageUrl",
									"value": "<string>",
									"description": "URL of the page image (optional)",
									"type": "text"
								},
								{
									"key": "coordinates",
									"value": "<string>",
									"description": "JSON string of the coordinates related to the extraction",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/create-extraction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"create-extraction"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "update graph by ID_Done Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomInteger(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"function getRandomDecimal(min, max, decimalPlaces) {\r",
							"    const factor = Math.pow(10, decimalPlaces);\r",
							"    return Math.floor(Math.random() * (max - min + 1) * factor) / factor;\r",
							"}\r",
							"\r",
							"function generateRandomArray(length) {\r",
							"    const array = [];\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const isInteger = Math.random() > 0.5;\r",
							"        if (isInteger) {\r",
							"            array.push(getRandomInteger(1, 100));\r",
							"        } else {\r",
							"            array.push(getRandomDecimal(0.1, 10.0, 2));\r",
							"        }\r",
							"    }\r",
							"    return array;\r",
							"}\r",
							"\r",
							"const randomArrayLength = getRandomInteger(5, 10);\r",
							"const randomArray = generateRandomArray(randomArrayLength);\r",
							"\r",
							"pm.globals.set(\"randomGraphArray\", JSON.stringify(randomArray));\r",
							"\r",
							"console.log(\"Generated Random Array:\", randomArray);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"graphState\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": true\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"userId\",\r",
							"        \"name\",\r",
							"        \"graphState\",\r",
							"        \"description\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate root-level properties\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"userId\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"graphState\").that.is.an(\"array\").and.has.length(1);\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\").and.is.not.empty;\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate graphState array\", () => {\r",
							"    jsonData.graphState.forEach((innerArray, index) => {\r",
							"        pm.expect(innerArray).to.be.an(\"array\").and.not.empty;\r",
							"        innerArray.forEach((value, innerIndex) => {\r",
							"            pm.expect(value).to.be.a(\"number\").and.to.be.within(0, 100);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"graphState\": [\n    {{randomGraphArray}}\n  ]\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id/graph",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id",
						"graph"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to update a Graph by ID"
			},
			"response": [
				{
					"name": "Graph updated successfully",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"graphState\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/graph",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"graph"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Project not found",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"graphState\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/graph",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"graph"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get a project by ID_Givestheprojectstatus_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"graphState\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"user\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"username\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"email\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"isEmailVerified\": {\r",
							"                    \"type\": \"boolean\"\r",
							"                },\r",
							"                \"otp\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"otpTime\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"token\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"tokenTime\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"googleId\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"pictureUrl\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"role\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                    \"type\": \"null\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\",\r",
							"                \"username\",\r",
							"                \"email\",\r",
							"                \"isEmailVerified\",\r",
							"                \"otp\",\r",
							"                \"otpTime\",\r",
							"                \"token\",\r",
							"                \"tokenTime\",\r",
							"                \"googleId\",\r",
							"                \"pictureUrl\",\r",
							"                \"role\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\"\r",
							"            ]\r",
							"        },\r",
							"        \"statuses\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        },\r",
							"        \"collaborators\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        },\r",
							"        \"knowledgeFiles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        },\r",
							"        \"tableStructures\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        },\r",
							"        \"comments\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"userId\",\r",
							"        \"name\",\r",
							"        \"graphState\",\r",
							"        \"description\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"user\",\r",
							"        \"statuses\",\r",
							"        \"collaborators\",\r",
							"        \"knowledgeFiles\",\r",
							"        \"tableStructures\",\r",
							"        \"comments\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate main object structure\", function () {\r",
							"    const expectedMainKeys = [\r",
							"        \"id\", \"userId\", \"name\", \"graphState\", \"description\",\r",
							"        \"createdAt\", \"updatedAt\", \"deletedAt\", \"user\", \"statuses\",\r",
							"        \"collaborators\", \"knowledgeFiles\", \"tableStructures\", \"comments\"\r",
							"    ];\r",
							"    expectedMainKeys.forEach(key => pm.expect(jsonData).to.have.property(key));\r",
							"});\r",
							"\r",
							"pm.test(\"Validate 'id', 'userId', and 'name'\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.userId).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"[\"createdAt\", \"updatedAt\", \"deletedAt\"].forEach(key => {\r",
							"    pm.test(`Validate date field '${key}'`, function () {\r",
							"        if (jsonData[key] !== null) {\r",
							"            pm.expect(jsonData[key]).to.be.a(\"string\").and.satisfy(date => !isNaN(new Date(date)));\r",
							"        } else {\r",
							"            pm.expect(jsonData[key]).to.be.null;\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Validate 'user' object\", function () {\r",
							"    const user = jsonData.user;\r",
							"    pm.expect(user).to.be.an(\"object\");\r",
							"    const expectedUserKeys = [\r",
							"        \"id\", \"name\", \"username\", \"email\", \"isEmailVerified\", \"otp\",\r",
							"        \"otpTime\", \"token\", \"tokenTime\", \"googleId\", \"pictureUrl\",\r",
							"        \"role\", \"createdAt\", \"updatedAt\", \"deletedAt\"\r",
							"    ];\r",
							"    expectedUserKeys.forEach(key => pm.expect(user).to.have.property(key));\r",
							"    pm.expect(user.id).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(user.username).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(user.email).to.be.a(\"string\").and.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    pm.expect(user.isEmailVerified).to.be.a(\"boolean\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate 'statuses' array\", function () {\r",
							"    pm.expect(jsonData.statuses).to.be.an(\"array\").that.is.not.empty;\r",
							"    jsonData.statuses.forEach((status, index) => {\r",
							"        pm.test(`Validate 'status' object at index ${index}`, function () {\r",
							"            const expectedStatusKeys = [\"id\", \"name\", \"type\", \"createdAt\", \"projectId\", \"updatedAt\", \"deletedAt\"];\r",
							"            expectedStatusKeys.forEach(key => pm.expect(status).to.have.property(key));\r",
							"            pm.expect(status.id).to.be.a(\"string\").and.not.empty;\r",
							"            pm.expect(status.name).to.be.a(\"string\").and.not.empty;\r",
							"            pm.expect(status.type).to.be.a(\"string\").and.not.empty;\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Validate 'knowledgeFiles' array\", function () {\r",
							"    pm.expect(jsonData.knowledgeFiles).to.be.an(\"array\");\r",
							"    jsonData.knowledgeFiles.forEach((file, index) => {\r",
							"        pm.test(`Validate 'knowledgeFile' object at index ${index}`, function () {\r",
							"            const expectedFileKeys = [\r",
							"                \"id\", \"fileLabels\", \"filePath\", \"abstract\", \"flagId\",\r",
							"                \"fileExt\", \"pageNo\", \"status\", \"doi\", \"createdAt\",\r",
							"                \"updatedAt\", \"deletedAt\", \"metaData\", \"assignees\", \"tags\"\r",
							"            ];\r",
							"            expectedFileKeys.forEach(key => pm.expect(file).to.have.property(key));\r",
							"            pm.expect(file.id).to.be.a(\"string\").and.not.empty;\r",
							"            pm.expect(file.filePath).to.be.a(\"string\").and.match(/^https?:\\/\\//);\r",
							"            pm.expect(file.fileExt).to.be.a(\"string\").and.not.empty;\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"jsonData.knowledgeFiles.forEach((file, fileIndex) => {\r",
							"    pm.test(`Validate 'metaData' for knowledgeFile at index ${fileIndex}`, function () {\r",
							"        const metaData = file.metaData;\r",
							"        pm.expect(metaData).to.be.an(\"object\");\r",
							"        const expectedMetaKeys = [\"id\", \"title\", \"fileName\", \"graphs\", \"tables\", \"plots\", \"equations\", \"keypoints\", \"summary\"];\r",
							"        expectedMetaKeys.forEach(key => pm.expect(metaData).to.have.property(key));\r",
							"    });\r",
							"});\r",
							"\r",
							"[\"collaborators\", \"tableStructures\", \"comments\"].forEach(key => {\r",
							"    pm.test(`Validate '${key}' array`, function () {\r",
							"        pm.expect(jsonData[key]).to.be.an(\"array\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to retrieve a project by ID"
			},
			"response": [
				{
					"name": "Project retrieved successfully",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Project not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get all table structures for a user Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.length > 0) {\r",
							"    let tableId = jsonData[0].id;\r",
							"    pm.environment.set(\"userTableId\", tableId);\r",
							"    console.log(tableId);\r",
							"}\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"tableName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"projectId\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"typeId\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"isEditable\": {\r",
							"                \"type\": \"boolean\"\r",
							"            },\r",
							"            \"status\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"oldId\": {\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"project\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"userId\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"graphState\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"items\": {},\r",
							"                            \"additionalProperties\": false\r",
							"                        }\r",
							"                    },\r",
							"                    \"description\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"createdAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"updatedAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"deletedAt\": {\r",
							"                        \"type\": \"null\"\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"userId\",\r",
							"                    \"name\",\r",
							"                    \"graphState\",\r",
							"                    \"description\",\r",
							"                    \"createdAt\",\r",
							"                    \"updatedAt\",\r",
							"                    \"deletedAt\"\r",
							"                ]\r",
							"            },\r",
							"            \"columns\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"id\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"name\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"type\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"order\": {\r",
							"                            \"type\": \"integer\"\r",
							"                        },\r",
							"                        \"cHeader\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"description\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"dType\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"cType\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"createdAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"updatedAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"deletedAt\": {\r",
							"                            \"type\": \"null\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"additionalProperties\": false,\r",
							"                    \"required\": [\r",
							"                        \"id\",\r",
							"                        \"name\",\r",
							"                        \"type\",\r",
							"                        \"order\",\r",
							"                        \"cHeader\",\r",
							"                        \"description\",\r",
							"                        \"dType\",\r",
							"                        \"cType\",\r",
							"                        \"createdAt\",\r",
							"                        \"updatedAt\",\r",
							"                        \"deletedAt\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"projectName\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"tableName\",\r",
							"            \"projectId\",\r",
							"            \"typeId\",\r",
							"            \"isEditable\",\r",
							"            \"status\",\r",
							"            \"oldId\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\",\r",
							"            \"project\",\r",
							"            \"columns\",\r",
							"            \"projectName\"\r",
							"        ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"First object has correct structure and values\", function () {\r",
							"    let item = jsonData[0];\r",
							"\r",
							"    pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"tableName\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"projectId\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"typeId\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"isEditable\").that.is.a(\"boolean\");\r",
							"    pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"project\").that.is.an(\"object\");\r",
							"    pm.expect(item).to.have.property(\"columns\").that.is.an(\"array\");\r",
							"    pm.expect(item).to.have.property(\"projectName\").and.to.be.a(\"string\");\r",
							"\r",
							"    let project = item.project;\r",
							"    pm.expect(project).to.have.property(\"id\", item.projectId);\r",
							"    pm.expect(project).to.have.property(\"name\");\r",
							"    pm.expect(project).to.have.property(\"graphState\").that.is.an(\"array\");\r",
							"    pm.expect(project.graphState[0]).to.be.an(\"array\");\r",
							"    pm.expect(project).to.have.property(\"description\").that.is.a(\"string\");\r",
							"    pm.expect(project).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(project).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"\r",
							"    let columns = item.columns;\r",
							"    pm.expect(columns).to.have.length.greaterThan(0);\r",
							"    let column = columns[0];\r",
							"    pm.expect(column).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(column).to.have.property(\"name\", \"ColumnName\");\r",
							"    pm.expect(column).to.have.property(\"type\", \"string\");\r",
							"    pm.expect(column).to.have.property(\"order\", 1);\r",
							"    pm.expect(column).to.have.property(\"cHeader\", \"string\");\r",
							"    pm.expect(column).to.have.property(\"description\", \"string\");\r",
							"    pm.expect(column).to.have.property(\"dType\", \"string\");\r",
							"    pm.expect(column).to.have.property(\"cType\", \"string\");\r",
							"    pm.expect(column).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(column).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/get-all-table-structure",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"get-all-table-structure"
					]
				}
			},
			"response": [
				{
					"name": "Successfully retrieved table structures.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/get-all-table-structure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"get-all-table-structure"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[]"
				}
			]
		},
		{
			"name": "Get a knowledge file by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let fileId = jsonData.id;\r",
							"let flagId = jsonData.flagId;\r",
							"\r",
							"pm.environment.set(\"fileId\", fileId);\r",
							"pm.environment.set(\"flagId\", flagId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"fileLabels\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"filePath\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"abstract\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"flagId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"fileExt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"pageNo\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"doi\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"metaData\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"fileName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"graphs\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"tables\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"plots\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"equations\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"keypoints\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"summary\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"title\",\r",
							"                \"fileName\",\r",
							"                \"graphs\",\r",
							"                \"tables\",\r",
							"                \"plots\",\r",
							"                \"equations\",\r",
							"                \"keypoints\",\r",
							"                \"summary\"\r",
							"            ]\r",
							"        },\r",
							"        \"assignees\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"fileLabels\",\r",
							"        \"filePath\",\r",
							"        \"abstract\",\r",
							"        \"flagId\",\r",
							"        \"fileExt\",\r",
							"        \"pageNo\",\r",
							"        \"status\",\r",
							"        \"doi\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"metaData\",\r",
							"        \"assignees\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Main object has correct structure and values\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"fileLabels\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"filePath\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"abstract\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"flagId\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"fileExt\", \"pdf\");\r",
							"    pm.expect(jsonData).to.have.property(\"pageNo\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"status\", \"not_started\");\r",
							"    pm.expect(jsonData).to.have.property(\"doi\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null;\r",
							"    pm.expect(jsonData).to.have.property(\"metaData\").that.is.an(\"object\");\r",
							"    pm.expect(jsonData).to.have.property(\"assignees\").that.is.an(\"array\").that.is.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"MetaData object has correct structure and values\", function () {\r",
							"    let metaData = jsonData.metaData;\r",
							"\r",
							"    pm.expect(metaData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(metaData).to.have.property(\"title\").that.is.a(\"string\");\r",
							"    pm.expect(metaData).to.have.property(\"fileName\", \"Sample_Research_Paper\");\r",
							"    pm.expect(metaData).to.have.property(\"graphs\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"tables\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"plots\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"equations\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"keypoints\").that.is.null;\r",
							"    pm.expect(metaData).to.have.property(\"summary\").that.is.a(\"string\").that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/knowledge-files/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"knowledge-files",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{knowledgeFileId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to retrieve a knowledge file by its ID"
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/knowledge-files/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"knowledge-files",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get supplementary files for a knowledge file_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let supplementFileId = jsonData[0].id;\r",
							"console.log(supplementFileId);\r",
							"pm.environment.set(\"supplementFileId\", supplementFileId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": [\r",
							"        {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"filePath\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"flagId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"fileExt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"customTitle\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"paperFlagId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                    \"type\": \"null\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"filePath\",\r",
							"                \"flagId\",\r",
							"                \"fileExt\",\r",
							"                \"status\",\r",
							"                \"customTitle\",\r",
							"                \"paperFlagId\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\"\r",
							"            ]\r",
							"        }\r",
							"    ],\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate API response structure and data\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
							"\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
							"        pm.expect(item.id).to.match(/^[a-f0-9-]{36}$/); // UUID format\r",
							"\r",
							"        pm.expect(item).to.have.property(\"filePath\").that.is.a(\"string\");\r",
							"        pm.expect(item.filePath).to.match(/^https?:\\/\\/.+\\..+$/); // Valid URL format\r",
							"\r",
							"        pm.expect(item).to.have.property(\"flagId\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(item).to.have.property(\"fileExt\").that.is.a(\"string\");\r",
							"        pm.expect(item.fileExt).to.equal(\"pdf\"); // Ensure it's a PDF file\r",
							"\r",
							"        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(item).to.have.property(\"customTitle\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(item).to.have.property(\"paperFlagId\").that.is.a(\"string\");\r",
							"\r",
							"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"        pm.expect(new Date(item.createdAt).toISOString()).to.equal(item.createdAt);\r",
							"\r",
							"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"        pm.expect(new Date(item.updatedAt).toISOString()).to.equal(item.updatedAt);\r",
							"\r",
							"        if (item.deletedAt !== null) {\r",
							"            pm.expect(item.deletedAt).to.be.a(\"string\");\r",
							"            pm.expect(new Date(item.deletedAt).toISOString()).to.equal(item.deletedAt);\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/knowledge-files/:id/supplementary-files",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"knowledge-files",
						":id",
						"supplementary-files"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{knowledgeFileId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to retrieve supplementary files related to a specific knowledge file by ID"
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/knowledge-files/:id/supplementary-files",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"knowledge-files",
								":id",
								"supplementary-files"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "GetGraphByID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {},\r",
							"    \"additionalItems\": true\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"First element is a nested array\", () => {\r",
							"    pm.expect(jsonData[0]).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Nested array contains numerical values\", () => {\r",
							"    if (jsonData[0]) {\r",
							"        let nestedArray = jsonData[0];\r",
							"\r",
							"        nestedArray.forEach((value, index) => {\r",
							"            pm.test(`Value at index ${index} is a number`, () => {\r",
							"                pm.expect(value).to.be.a(\"number\");\r",
							"            });\r",
							"        });\r",
							"    } else {\r",
							"        pm.test(\"Nested array is empty\", () => {\r",
							"            pm.expect(jsonData[0]).to.not.be.an(\"undefined\");\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"graphState\": [\r\n        [\r\n            \"entity\",\r\n            \"relation\",\r\n            \"entity\"\r\n        ]\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id/graph",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id",
						"graph"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/graph",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"graph"
							],
							"query": [
								{
									"key": "id",
									"value": "{{projectId}}",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Thu, 05 Dec 2024 06:50:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "ETag",
							"value": "W/\"18-fbq9lDzlBb+CuQ28qzeZobgQtbo\""
						}
					],
					"cookie": [],
					"body": "[\n    [\n        5.14,\n        49,\n        6.06,\n        7.28,\n        32\n    ]\n]"
				}
			]
		},
		{
			"name": "Update Table Definition__Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"tableName\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"projectId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"typeId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"isEditable\": {\r",
							"            \"type\": \"boolean\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"oldId\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"columns\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": false\r",
							"        },\r",
							"        \"type\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"typeName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                    \"type\": \"null\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"typeName\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"tableName\",\r",
							"        \"projectId\",\r",
							"        \"typeId\",\r",
							"        \"isEditable\",\r",
							"        \"status\",\r",
							"        \"oldId\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"columns\",\r",
							"        \"type\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains top-level properties\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys('id', 'tableName', 'projectId', 'typeId', 'isEditable', 'status', 'oldId', 'createdAt', 'updatedAt', 'deletedAt', 'columns', 'type');\r",
							"});\r",
							"\r",
							"pm.test(\"Columns are valid\", function () {\r",
							"    pm.expect(jsonData.columns).to.be.an(\"array\").that.is.not.empty;\r",
							"\r",
							"    jsonData.columns.forEach(column => {\r",
							"        pm.expect(column).to.have.all.keys('id', 'name', 'type', 'order', 'cHeader', 'description', 'dType', 'cType', 'createdAt', 'updatedAt', 'deletedAt');\r",
							"        pm.expect(column.name).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(column.type).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(column.order).to.be.a('number').that.is.above(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Project type is 'plot'\", function () {\r",
							"    pm.expect(jsonData.type.typeName).to.equal(\"plot\");\r",
							"});\r",
							"\r",
							"pm.test(\"Created and Updated Dates are valid\", function () {\r",
							"    const createdAt = new Date(jsonData.createdAt);\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"\r",
							"    pm.expect(createdAt).to.be.a('date').that.is.not.NaN;\r",
							"    pm.expect(updatedAt).to.be.a('date').that.is.not.NaN;\r",
							"});\r",
							"\r",
							"pm.test(\"Updated time is later than created time\", function () {\r",
							"    const createdAt = new Date(jsonData.createdAt);\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"\r",
							"    pm.expect(updatedAt).to.be.above(createdAt);\r",
							"});\r",
							"\r",
							"pm.test(\"Table is editable\", function () {\r",
							"    pm.expect(jsonData.isEditable).to.equal(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Type object is valid\", function () {\r",
							"    pm.expect(jsonData.type).to.have.all.keys('id', 'typeName', 'createdAt', 'updatedAt', 'deletedAt');\r",
							"    pm.expect(jsonData.type.typeName).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"DeletedAt is null\", function () {\r",
							"    pm.expect(jsonData.deletedAt).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Status is 'active'\", function () {\r",
							"    pm.expect(jsonData.status).to.equal(\"active\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tableName\": \"MyTable\",\r\n  \"projectId\": \"{{newProId}}\",\r\n  \"typeId\": \"{{typeId}}\",\r\n  \"isEditable\": true,\r\n  \"status\": \"active\",\r\n  \"columns\": [\r\n    {\r\n      \"id\": \"{{columnId}}\",\r\n      \"name\": \"DelineateQA\",\r\n      \"type\": \"string\",\r\n      \"cHeader\": \"string\",\r\n      \"description\": \"string\",\r\n      \"dType\": \"string\",\r\n      \"order\": 1,\r\n      \"cType\": \"string\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/update-table-definition/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"update-table-definition",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{tableId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a project by ID_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"graphState\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": true\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"userId\",\r",
							"        \"name\",\r",
							"        \"graphState\",\r",
							"        \"description\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Object has correct structure and values\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"userId\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"graphState\").that.is.an(\"array\");\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null;\r",
							"});\r",
							"\r",
							"pm.test(\"GraphState is a valid array of arrays\", function () {\r",
							"    let graphState = jsonData.graphState;\r",
							"\r",
							"    pm.expect(graphState).to.be.an(\"array\");\r",
							"    pm.expect(graphState.length).to.be.greaterThan(0); // Ensure it's not empty\r",
							"\r",
							"    graphState.forEach((nestedArray, index) => {\r",
							"        pm.test(`Nested array at index ${index} contains numerical values`, function () {\r",
							"            pm.expect(nestedArray).to.be.an(\"array\");\r",
							"            nestedArray.forEach(value => {\r",
							"                pm.expect(value).to.be.a(\"number\");\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Date fields are valid ISO strings\", function () {\r",
							"    const isIsoString = (dateString) => {\r",
							"        return !isNaN(Date.parse(dateString)) && dateString.endsWith(\"Z\");\r",
							"    };\r",
							"\r",
							"    pm.expect(isIsoString(jsonData.createdAt)).to.be.true;\r",
							"    pm.expect(isIsoString(jsonData.updatedAt)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomInteger(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"function getRandomDecimal(min, max, decimalPlaces) {\r",
							"    const factor = Math.pow(10, decimalPlaces);\r",
							"    return Math.floor(Math.random() * (max - min + 1) * factor) / factor;\r",
							"}\r",
							"\r",
							"function generateRandomArray(length) {\r",
							"    const array = [];\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const isInteger = Math.random() > 0.5;\r",
							"        if (isInteger) {\r",
							"            array.push(getRandomInteger(1, 100));\r",
							"        } else {\r",
							"            array.push(getRandomDecimal(0.1, 10.0, 2));\r",
							"        }\r",
							"    }\r",
							"    return array;\r",
							"}\r",
							"\r",
							"const randomArrayLength = getRandomInteger(5, 10);\r",
							"const randomArray = generateRandomArray(randomArrayLength);\r",
							"\r",
							"pm.environment.set(\"randomArray\", JSON.stringify(randomArray));\r",
							"\r",
							"console.log(\"Generated Random Array:\", randomArray);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"name\": \"{{$randomUserName}}\",\n  \"description\": \"{{$randomLoremSentence}}\",\n  \"graphState\": [\n    {{randomArray}}\n  ]\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to update a project by ID"
			},
			"response": [
				{
					"name": "Project updated successfully",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"graphState\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Project not found",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"graphState\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Reset a project Graph and Message_Done Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"graphState\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": true\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"userId\",\r",
							"        \"name\",\r",
							"        \"graphState\",\r",
							"        \"description\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Object has correct structure and values\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"userId\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"graphState\").that.is.an(\"array\");\r",
							"    pm.expect(jsonData.graphState.length).to.equal(0);\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"deletedAt\").that.is.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Date fields are valid ISO strings\", () => {\r",
							"    const isIsoString = (dateString) => {\r",
							"        return !isNaN(Date.parse(dateString)) && dateString.endsWith(\"Z\");\r",
							"    };\r",
							"\r",
							"    pm.expect(isIsoString(jsonData.createdAt)).to.be.true;\r",
							"    pm.expect(isIsoString(jsonData.updatedAt)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"GraphState is an empty array\", () => {\r",
							"    pm.expect(jsonData.graphState).to.be.an(\"array\").that.is.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id/reset",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id",
						"reset"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to Reset a project Graph and Message by ID"
			},
			"response": [
				{
					"name": "Project reset successfully",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/reset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"reset"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Project not found",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id/reset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id",
								"reset"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get all types Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let typeId = jsonData[0].id;\r",
							"console.log(typeId);\r",
							"pm.environment.set(\"typeId\", typeId);\r",
							"\r",
							"const schema ={\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"typeName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"typeName\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\"\r",
							"        ]\r",
							"    },\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item in the array has a valid schema\", function () {\r",
							"    jsonData.forEach((item, index) => {\r",
							"\r",
							"        // Additional validations\r",
							"        pm.test(`Item ${index + 1} - typeName is valid`, function () {\r",
							"            pm.expect(item.typeName).to.be.a(\"string\");\r",
							"        });\r",
							"\r",
							"        pm.test(`Item ${index + 1} - createdAt is a valid date`, function () {\r",
							"            pm.expect(new Date(item.createdAt).toString()).not.to.equal(\"Invalid Date\");\r",
							"        });\r",
							"\r",
							"        pm.test(`Item ${index + 1} - updatedAt is a valid date`, function () {\r",
							"            pm.expect(new Date(item.updatedAt).toString()).not.to.equal(\"Invalid Date\");\r",
							"        });\r",
							"\r",
							"        pm.test(`Item ${index + 1} - deletedAt is null or a valid date`, function () {\r",
							"            if (item.deletedAt !== null) {\r",
							"                pm.expect(new Date(item.deletedAt).toString()).not.to.equal(\"Invalid Date\");\r",
							"            } else {\r",
							"                pm.expect(item.deletedAt).to.be.null;\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/types",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"types"
					]
				}
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/types",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"types"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Line data by tableId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"plotId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"points\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {},\r",
							"          \"additionalItems\": false\r",
							"        },\r",
							"        \"normalizePoints\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {},\r",
							"          \"additionalItems\": false\r",
							"        },\r",
							"        \"labels\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"lineName\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"lineNumber\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"additionalProperties\": false,\r",
							"          \"required\": [\r",
							"            \"lineName\",\r",
							"            \"status\",\r",
							"            \"lineNumber\"\r",
							"          ]\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"plot\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"extractionId\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"extractionState\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"precision\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"extraColumns\": {\r",
							"                  \"type\": \"array\",\r",
							"                  \"items\": {},\r",
							"                  \"additionalItems\": false\r",
							"                },\r",
							"                \"isCalibrated\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"showVariability\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"variabilityType\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"isAsymmetricalBar\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"showConfidenceInterval\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"isVariabilityCalculateFromTopBar\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                }\r",
							"              },\r",
							"              \"additionalProperties\": false,\r",
							"              \"required\": [\r",
							"                \"precision\",\r",
							"                \"extraColumns\",\r",
							"                \"isCalibrated\",\r",
							"                \"showVariability\",\r",
							"                \"variabilityType\",\r",
							"                \"isAsymmetricalBar\",\r",
							"                \"showConfidenceInterval\",\r",
							"                \"isVariabilityCalculateFromTopBar\"\r",
							"              ]\r",
							"            },\r",
							"            \"plotAxisData\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"xMax\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"xMin\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"yMax\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"yMin\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"xUnit\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"yUnit\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"xLabel\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"yLabel\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"xAxisRef\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"yAxisRef\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"isxAxisLogScale\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"isyAxisLogScale\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"isxAxisCategorical\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"isyAxisCategorical\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                }\r",
							"              },\r",
							"              \"additionalProperties\": false,\r",
							"              \"required\": [\r",
							"                \"xMax\",\r",
							"                \"xMin\",\r",
							"                \"yMax\",\r",
							"                \"yMin\",\r",
							"                \"xUnit\",\r",
							"                \"yUnit\",\r",
							"                \"xLabel\",\r",
							"                \"yLabel\",\r",
							"                \"xAxisRef\",\r",
							"                \"yAxisRef\",\r",
							"                \"isxAxisLogScale\",\r",
							"                \"isyAxisLogScale\",\r",
							"                \"isxAxisCategorical\",\r",
							"                \"isyAxisCategorical\"\r",
							"              ]\r",
							"            },\r",
							"            \"extraColumns\": {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": {},\r",
							"              \"additionalItems\": false\r",
							"            },\r",
							"            \"figureUrl\": {\r",
							"              \"type\": \"null\"\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"              \"type\": \"null\"\r",
							"            },\r",
							"            \"extraction\": {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"id\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fileId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"tableId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"figure\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"imageUrls\": {\r",
							"                  \"type\": \"array\",\r",
							"                  \"items\": {},\r",
							"                  \"additionalItems\": false\r",
							"                },\r",
							"                \"coordinates\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"labels\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                  \"type\": \"null\"\r",
							"                }\r",
							"              },\r",
							"              \"additionalProperties\": false,\r",
							"              \"required\": [\r",
							"                \"id\",\r",
							"                \"fileId\",\r",
							"                \"tableId\",\r",
							"                \"status\",\r",
							"                \"figure\",\r",
							"                \"imageUrls\",\r",
							"                \"coordinates\",\r",
							"                \"labels\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\"\r",
							"              ]\r",
							"            }\r",
							"          },\r",
							"          \"additionalProperties\": false,\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"extractionId\",\r",
							"            \"extractionState\",\r",
							"            \"plotAxisData\",\r",
							"            \"extraColumns\",\r",
							"            \"figureUrl\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\",\r",
							"            \"extraction\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"plotId\",\r",
							"        \"points\",\r",
							"        \"normalizePoints\",\r",
							"        \"labels\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"plot\"\r",
							"      ]\r",
							"    }\r",
							"  ],\r",
							"  \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate root-level array and elements\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\").and.not.empty;\r",
							"\r",
							"    jsonData.forEach((item, index) => {\r",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(item).to.have.property(\"plotId\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(item).to.have.property(\"points\").that.is.an(\"array\");\r",
							"        pm.expect(item).to.have.property(\"normalizePoints\").that.is.an(\"array\");\r",
							"        pm.expect(item).to.have.property(\"labels\").that.is.an(\"object\");\r",
							"        pm.expect(item).to.have.property(\"plot\").that.is.an(\"object\");\r",
							"        pm.expect(item).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"        pm.expect(item).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"        pm.expect(item).to.have.property(\"deletedAt\").that.is.null;\r",
							"\r",
							"        const labels = item.labels;\r",
							"        pm.expect(labels).to.have.property(\"lineName\").that.is.a(\"string\").and.equals(\"line-1\");\r",
							"        pm.expect(labels).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"not_started\");\r",
							"        pm.expect(labels).to.have.property(\"lineNumber\").that.is.a(\"number\").and.equals(1);\r",
							"\r",
							"        const plot = item.plot;\r",
							"        pm.expect(plot).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(plot).to.have.property(\"extractionId\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(plot).to.have.property(\"extractionState\").that.is.an(\"object\");\r",
							"        pm.expect(plot).to.have.property(\"plotAxisData\").that.is.an(\"object\");\r",
							"\r",
							"        const extractionState = plot.extractionState;\r",
							"        pm.expect(extractionState).to.have.property(\"precision\").that.is.a(\"number\").and.equals(6);\r",
							"        pm.expect(extractionState).to.have.property(\"extraColumns\").that.is.an(\"array\");\r",
							"        pm.expect(extractionState).to.have.property(\"isCalibrated\").that.is.a(\"boolean\").and.is.false;\r",
							"        pm.expect(extractionState).to.have.property(\"showVariability\").that.is.a(\"boolean\").and.is.true;\r",
							"\r",
							"        const plotAxisData = plot.plotAxisData;\r",
							"        pm.expect(plotAxisData).to.have.property(\"xMax\").that.is.a(\"number\").and.equals(0);\r",
							"        pm.expect(plotAxisData).to.have.property(\"xMin\").that.is.a(\"number\").and.equals(1);\r",
							"        pm.expect(plotAxisData).to.have.property(\"yMax\").that.is.a(\"number\").and.equals(0);\r",
							"        pm.expect(plotAxisData).to.have.property(\"yMin\").that.is.a(\"number\").and.equals(1);\r",
							"        pm.expect(plotAxisData).to.have.property(\"xLabel\").that.is.a(\"string\").and.equals(\"x axis label\");\r",
							"        pm.expect(plotAxisData).to.have.property(\"yLabel\").that.is.a(\"string\").and.equals(\"y axis label\");\r",
							"\r",
							"        const extraction = plot.extraction;\r",
							"        pm.expect(extraction).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(extraction).to.have.property(\"fileId\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(extraction).to.have.property(\"tableId\").that.is.a(\"string\").and.is.not.empty;\r",
							"        pm.expect(extraction).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"processing\");\r",
							"        pm.expect(extraction).to.have.property(\"figure\").that.is.a(\"string\").and.equals(\"1\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/lines/:tableId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"lines",
						":tableId"
					],
					"variable": [
						{
							"key": "tableId",
							"value": "{{tableId}}",
							"description": "(Required) The ID of the table"
						}
					]
				}
			},
			"response": [
				{
					"name": "Line data successfully retrieved.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/lines/:tableId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"lines",
								":tableId"
							],
							"variable": [
								{
									"key": "tableId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[]"
				},
				{
					"name": "Line data not found.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/lines/:tableId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"lines",
								":tableId"
							],
							"variable": [
								{
									"key": "tableId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Dynamic by projectId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": [\r",
							"        {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"tableName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"projectId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"typeId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"isEditable\": {\r",
							"                    \"type\": \"boolean\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"oldId\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"type\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"id\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"typeName\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"createdAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"updatedAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"deletedAt\": {\r",
							"                            \"type\": \"null\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"additionalProperties\": false,\r",
							"                    \"required\": [\r",
							"                        \"id\",\r",
							"                        \"typeName\",\r",
							"                        \"createdAt\",\r",
							"                        \"updatedAt\",\r",
							"                        \"deletedAt\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"tableName\",\r",
							"                \"projectId\",\r",
							"                \"typeId\",\r",
							"                \"isEditable\",\r",
							"                \"status\",\r",
							"                \"oldId\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\",\r",
							"                \"type\"\r",
							"            ]\r",
							"        }\r",
							"    ],\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"First object in the array has correct structure and values\", function () {\r",
							"    let item = jsonData[0];\r",
							"    pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"tableName\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"projectId\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"typeId\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"isEditable\", true);\r",
							"    pm.expect(item).to.have.property(\"status\", \"active\");\r",
							"    pm.expect(item).to.have.property(\"oldId\").that.is.null;\r",
							"    pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(item).to.have.property(\"deletedAt\").that.is.null;\r",
							"\r",
							"    pm.expect(item).to.have.property(\"type\").that.is.an(\"object\");\r",
							"\r",
							"    let type = item.type;\r",
							"    pm.expect(type).to.have.property(\"id\").that.is.a(\"string\");\r",
							"    pm.expect(type).to.have.property(\"typeName\", \"plot\");\r",
							"    pm.expect(type).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(type).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"    pm.expect(type).to.have.property(\"deletedAt\").that.is.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Date fields are valid ISO strings\", function () {\r",
							"    const isIsoString = (dateString) => {\r",
							"        return !isNaN(Date.parse(dateString)) && dateString.endsWith(\"Z\");\r",
							"    };\r",
							"\r",
							"    let item = jsonData[0];\r",
							"    pm.expect(isIsoString(item.createdAt)).to.be.true;\r",
							"    pm.expect(isIsoString(item.updatedAt)).to.be.true;\r",
							"    pm.expect(isIsoString(item.type.createdAt)).to.be.true;\r",
							"    pm.expect(isIsoString(item.type.updatedAt)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/:projectId/table-structures?type=plot",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						":projectId",
						"table-structures"
					],
					"query": [
						{
							"key": "type",
							"value": "plot",
							"description": "(Required)  plot||line"
						}
					],
					"variable": [
						{
							"key": "projectId",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				}
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:projectId/table-structures?type=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":projectId",
								"table-structures"
							],
							"query": [
								{
									"key": "type",
									"value": "<string>",
									"description": "(Required) "
								}
							],
							"variable": [
								{
									"key": "projectId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get PresetExtraction by tableId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// const schema = {\r",
							"//     \"type\": \"array\",\r",
							"//     \"items\": {},\r",
							"//     \"additionalItems\": true\r",
							"// }\r",
							"\r",
							"// pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"//     pm.response.to.have.jsonSchema(schema);\r",
							"// });\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/preset-extraction/:tableId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"preset-extraction",
						":tableId"
					],
					"variable": [
						{
							"key": "tableId",
							"value": "{{tableId}}",
							"description": "(Required) The ID of the table"
						}
					]
				}
			},
			"response": [
				{
					"name": "PresetExtraction data successfully retrieved.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/preset-extraction/:tableId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"preset-extraction",
								":tableId"
							],
							"variable": [
								{
									"key": "tableId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[]"
				},
				{
					"name": "PresetExtraction not found.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/preset-extraction/:tableId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"preset-extraction",
								":tableId"
							],
							"variable": [
								{
									"key": "tableId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get extractions by fileId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"jsonData.forEach((item, index) => {\r",
							"    pm.test(`Validate object at index ${index}`, function () {\r",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"fileId\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"tableId\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"figure\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"imageUrls\").that.is.an(\"array\");\r",
							"        pm.expect(item).to.have.property(\"coordinates\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"deletedAt\").that.is.null;\r",
							"\r",
							"        if (item.table) {\r",
							"            pm.expect(item.table).to.have.property(\"id\").that.is.a(\"string\");\r",
							"            pm.expect(item.table).to.have.property(\"tableName\").that.is.a(\"string\");\r",
							"            pm.expect(item.table).to.have.property(\"projectId\").that.is.a(\"string\");\r",
							"            pm.expect(item.table).to.have.property(\"type\").that.is.an(\"object\");\r",
							"            \r",
							"            // Validate \"columns\" array in \"table\"\r",
							"            if (Array.isArray(item.table.columns)) {\r",
							"                item.table.columns.forEach((column, colIndex) => {\r",
							"                    pm.test(`Validate column ${colIndex} in table at index ${index}`, function () {\r",
							"                        pm.expect(column).to.have.property(\"id\").that.is.a(\"string\");\r",
							"                        pm.expect(column).to.have.property(\"name\").that.is.a(\"string\");\r",
							"                        pm.expect(column).to.have.property(\"type\").that.is.a(\"string\");\r",
							"                    });\r",
							"                });\r",
							"            }\r",
							"        }\r",
							"\r",
							"        if (Array.isArray(item.plots)) {\r",
							"            item.plots.forEach((plot, plotIndex) => {\r",
							"                pm.test(`Validate plot ${plotIndex} in object at index ${index}`, function () {\r",
							"                    pm.expect(plot).to.have.property(\"id\").that.is.a(\"string\");\r",
							"                    pm.expect(plot).to.have.property(\"extractionState\").that.is.an(\"object\");\r",
							"                    \r",
							"                    if (Array.isArray(plot.lines)) {\r",
							"                        plot.lines.forEach((line, lineIndex) => {\r",
							"                            pm.test(`Validate line ${lineIndex} in plot ${plotIndex}`, function () {\r",
							"                                pm.expect(line).to.have.property(\"id\").that.is.a(\"string\");\r",
							"                                pm.expect(line).to.have.property(\"labels\").that.is.an(\"object\");\r",
							"                                pm.expect(line.labels).to.have.property(\"lineName\").that.is.a(\"string\");\r",
							"                            });\r",
							"                        });\r",
							"                    }\r",
							"                });\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/extractions-list/:fileId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"extractions-list",
						":fileId"
					],
					"variable": [
						{
							"key": "fileId",
							"value": "{{fileId}}",
							"description": "(Required) UUID of the file"
						}
					]
				}
			},
			"response": [
				{
					"name": "Extractions retrieved successfully.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/extractions-list/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"extractions-list",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"id\": \"<string>\",\n    \"fileId\": \"<string>\",\n    \"tableId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"figure\": \"<string>\",\n    \"imageUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"coordinates\": [],\n    \"table\": {\n      \"id\": \"<string>\",\n      \"tableName\": \"<string>\",\n      \"typeId\": \"<string>\"\n    },\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"fileId\": \"<string>\",\n    \"tableId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"figure\": \"<string>\",\n    \"imageUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"coordinates\": [],\n    \"table\": {\n      \"id\": \"<string>\",\n      \"tableName\": \"<string>\",\n      \"typeId\": \"<string>\"\n    },\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\"\n  }\n]"
				},
				{
					"name": "No extractions found.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/extractions-list/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"extractions-list",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get PDF images by flag ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// const schema = {\r",
							"//     \"type\": \"array\",\r",
							"//     \"items\": {},\r",
							"//     \"additionalItems\": true\r",
							"// }\r",
							"\r",
							"// pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"//     pm.response.to.have.jsonSchema(schema);\r",
							"// });\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/pdf-image/:flagId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"pdf-image",
						":flagId"
					],
					"variable": [
						{
							"key": "flagId",
							"value": "{{flagId}}",
							"description": "(Required) Flag identifier for retrieving PDF images"
						}
					]
				}
			},
			"response": [
				{
					"name": "PDF images retrieved successfully.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/pdf-image/:flagId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"pdf-image",
								":flagId"
							],
							"variable": [
								{
									"key": "flagId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"urls\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
				},
				{
					"name": "Images not found.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/pdf-image/:flagId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"pdf-image",
								":flagId"
							],
							"variable": [
								{
									"key": "flagId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get all table structures for a user_GivesTableID_DONE Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let columnId = jsonData[0].columns[0].id;\r",
							"console.log(columnId);\r",
							"pm.environment.set(\"columnId\", columnId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"tableName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"projectId\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"typeId\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"isEditable\": {\r",
							"                \"type\": \"boolean\"\r",
							"            },\r",
							"            \"status\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"oldId\": {\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"project\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"userId\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"graphState\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"items\": {},\r",
							"                            \"additionalItems\": true,\r",
							"                            \"additionalProperties\": false\r",
							"                        },\r",
							"                        \"additionalItems\": true\r",
							"                    },\r",
							"                    \"description\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"createdAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"updatedAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"deletedAt\": {\r",
							"                        \"type\": \"null\"\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"userId\",\r",
							"                    \"name\",\r",
							"                    \"graphState\",\r",
							"                    \"description\",\r",
							"                    \"createdAt\",\r",
							"                    \"updatedAt\",\r",
							"                    \"deletedAt\"\r",
							"                ]\r",
							"            },\r",
							"            \"columns\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"id\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"name\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"type\": {\r",
							"                            \"type\": \"string\",\r",
							"                            \"enum\": [\r",
							"                                \"string\"\r",
							"                            ]\r",
							"                        },\r",
							"                        \"order\": {\r",
							"                            \"type\": \"integer\"\r",
							"                        },\r",
							"                        \"cHeader\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"description\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"dType\": {\r",
							"                            \"type\": \"string\",\r",
							"                            \"enum\": [\r",
							"                                \"string\"\r",
							"                            ]\r",
							"                        },\r",
							"                        \"cType\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"createdAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"updatedAt\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"deletedAt\": {\r",
							"                            \"type\": \"null\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"additionalProperties\": false,\r",
							"                    \"required\": [\r",
							"                        \"id\",\r",
							"                        \"name\",\r",
							"                        \"type\",\r",
							"                        \"order\",\r",
							"                        \"cHeader\",\r",
							"                        \"description\",\r",
							"                        \"dType\",\r",
							"                        \"cType\",\r",
							"                        \"createdAt\",\r",
							"                        \"updatedAt\",\r",
							"                        \"deletedAt\"\r",
							"                    ]\r",
							"                },\r",
							"                \"additionalItems\": true\r",
							"            },\r",
							"            \"projectName\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"tableName\",\r",
							"            \"projectId\",\r",
							"            \"typeId\",\r",
							"            \"isEditable\",\r",
							"            \"status\",\r",
							"            \"oldId\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\",\r",
							"            \"project\",\r",
							"            \"columns\",\r",
							"            \"projectName\"\r",
							"        ]\r",
							"    },\r",
							"    \"additionalItems\": true\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array with at least one item\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Each item in the response contains necessary properties\", function() {\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('project').that.is.an('object');\r",
							"        pm.expect(item.project).to.have.property('name').that.is.a('string').and.is.not.empty;\r",
							"        pm.expect(item).to.have.property('status').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('columns').that.is.an('array').and.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Table columns are valid for each item\", function() {\r",
							"    jsonData.forEach(item => {\r",
							"        item.columns.forEach(column => {\r",
							"            pm.expect(column).to.have.property('name').that.is.a('string').and.is.not.empty;\r",
							"            pm.expect(column).to.have.property('type').that.is.a('string').and.is.not.empty;\r",
							"            pm.expect(column).to.have.property('order').that.is.a('number').and.is.above(0);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Project description is valid\", () => {\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item.project).to.have.property('description').that.is.a('string').and.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Created and updated dates are valid for each project\", () => {\r",
							"    jsonData.forEach(item => {\r",
							"        const createdAt = item.createdAt;\r",
							"        const updatedAt = item.updatedAt;\r",
							"        pm.expect(new Date(createdAt)).to.be.a('date').that.is.not.NaN;\r",
							"        pm.expect(new Date(updatedAt)).to.be.a('date').that.is.not.NaN;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Status is always 'active'\", () => {\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('status', 'active');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/get-all-table-structure",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"get-all-table-structure"
					]
				}
			},
			"response": [
				{
					"name": "Successfully retrieved table structures.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/get-all-table-structure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"get-all-table-structure"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[]"
				}
			]
		},
		{
			"name": "Get table structure by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"tableName\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"projectId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"typeId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"isEditable\": {\r",
							"            \"type\": \"boolean\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"oldId\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"columns\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"type\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"order\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    },\r",
							"                    \"cHeader\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"description\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"dType\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"cType\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"createdAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"updatedAt\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"deletedAt\": {\r",
							"                        \"type\": \"null\"\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"name\",\r",
							"                    \"type\",\r",
							"                    \"order\",\r",
							"                    \"cHeader\",\r",
							"                    \"description\",\r",
							"                    \"dType\",\r",
							"                    \"cType\",\r",
							"                    \"createdAt\",\r",
							"                    \"updatedAt\",\r",
							"                    \"deletedAt\"\r",
							"                ]\r",
							"            },\r",
							"            \"additionalItems\": true\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"tableName\",\r",
							"        \"projectId\",\r",
							"        \"typeId\",\r",
							"        \"isEditable\",\r",
							"        \"status\",\r",
							"        \"oldId\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"columns\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains top-level properties\", function() {\r",
							"    pm.expect(jsonData).to.have.all.keys('id', 'tableName', 'projectId', 'typeId', 'isEditable', 'status', 'oldId', 'createdAt', 'updatedAt', 'deletedAt', 'columns');\r",
							"    pm.expect(jsonData.status).to.equal(\"active\");\r",
							"});\r",
							"\r",
							"pm.test(\"Columns are valid\", function() {\r",
							"    pm.expect(jsonData.columns).to.be.an(\"array\").that.is.not.empty;\r",
							"\r",
							"    jsonData.columns.forEach(column => {\r",
							"        pm.expect(column).to.have.all.keys('id', 'name', 'type', 'order', 'cHeader', 'description', 'dType', 'cType', 'createdAt', 'updatedAt', 'deletedAt');\r",
							"        pm.expect(column.name).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(column.type).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(column.order).to.be.a('number').that.is.above(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Created and Updated Dates are valid\", function() {\r",
							"    const createdAt = new Date(jsonData.createdAt);\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"\r",
							"    pm.expect(createdAt).to.be.a('date').that.is.not.NaN;\r",
							"    pm.expect(updatedAt).to.be.a('date').that.is.not.NaN;\r",
							"});\r",
							"\r",
							"pm.test(\"Updated time is later than created time\", function() {\r",
							"    const createdAt = new Date(jsonData.createdAt);\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"\r",
							"    pm.expect(updatedAt).to.be.above(createdAt);\r",
							"});\r",
							"\r",
							"pm.test(\"Table is editable\", function() {\r",
							"    pm.expect(jsonData.isEditable).to.equal(true);\r",
							"});\r",
							"\r",
							"pm.test(\"DeletedAt is null\", function() {\r",
							"    pm.expect(jsonData.deletedAt).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"OldId is null\", function() {\r",
							"    pm.expect(jsonData.oldId).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"ProjectId is valid\", function() {\r",
							"    pm.expect(jsonData.projectId).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/:id/get-table-definition",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						":id",
						"get-table-definition"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{tableId}}",
							"description": "(Required) UUID of the table structure"
						}
					]
				}
			},
			"response": [
				{
					"name": "Table definition retrieved successfully.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/get-table-definition",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"get-table-definition"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{}"
				},
				{
					"name": "Table definition not found.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/get-table-definition",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"get-table-definition"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Detect axes min and max values Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"points\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"label\": {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    \"x\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    },\r",
							"                    \"y\": {\r",
							"                        \"type\": \"integer\",\r",
							"                        \"enum\": [\r",
							"                            399,\r",
							"                            38\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"label\",\r",
							"                    \"x\",\r",
							"                    \"y\"\r",
							"                ]\r",
							"            },\r",
							"            \"additionalItems\": false\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"points\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains points array\", function() {\r",
							"    pm.expect(jsonData).to.have.property('points').that.is.an('array').with.length.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each point has the required properties\", function() {\r",
							"    jsonData.points.forEach(point => {\r",
							"        pm.expect(point).to.have.all.keys('label', 'x', 'y');\r",
							"        pm.expect(point.label).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(point.x).to.be.a('number');\r",
							"        pm.expect(point.y).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Points labels are correct\", function() {\r",
							"    const validLabels = ['xmin', 'xmax', 'ymin', 'ymax'];\r",
							"    jsonData.points.forEach(point => {\r",
							"        pm.expect(validLabels).to.include(point.label);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"xmin and xmax share the same y value\", function() {\r",
							"    const xminPoint = jsonData.points.find(point => point.label === 'xmin');\r",
							"    const xmaxPoint = jsonData.points.find(point => point.label === 'xmax');\r",
							"    pm.expect(xminPoint.y).to.equal(xmaxPoint.y);\r",
							"});\r",
							"\r",
							"pm.test(\"ymin and ymax share the same x value\", function() {\r",
							"    const yminPoint = jsonData.points.find(point => point.label === 'ymin');\r",
							"    const ymaxPoint = jsonData.points.find(point => point.label === 'ymax');\r",
							"    pm.expect(yminPoint.x).to.equal(ymaxPoint.x);\r",
							"});\r",
							"\r",
							"pm.test(\"Check x and y coordinates are within reasonable ranges\", function() {\r",
							"    jsonData.points.forEach(point => {\r",
							"        pm.expect(point.x).to.be.above(0);\r",
							"        pm.expect(point.y).to.be.above(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"figure_url\": \"https://delineate-staging.nyc3.digitaloceanspaces.com/delineate/plot-extraction/65a4fe49f982b68328136715/660da3731a51d9c487c87746/image_lliuuuho4z0j6mml7bn8x98m.png\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/plot/detect-axes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"plot",
						"detect-axes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get plot data by extraction id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let extractionPlotId = jsonData.extractionPlotId;\r",
							"console.log(extractionPlotId);\r",
							"pm.environment.set(\"extractionPlotId\", extractionPlotId);\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"extractionPlotId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"plotAxisData\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"xMax\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"xMin\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"yMax\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"yMin\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"xUnit\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"yUnit\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"xLabel\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"yLabel\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"xAxisRef\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"yAxisRef\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isxAxisLogScale\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isyAxisLogScale\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isxAxisCategorical\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isyAxisCategorical\": {\r",
							"          \"type\": \"boolean\"\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"xMax\",\r",
							"        \"xMin\",\r",
							"        \"yMax\",\r",
							"        \"yMin\",\r",
							"        \"xUnit\",\r",
							"        \"yUnit\",\r",
							"        \"xLabel\",\r",
							"        \"yLabel\",\r",
							"        \"xAxisRef\",\r",
							"        \"yAxisRef\",\r",
							"        \"isxAxisLogScale\",\r",
							"        \"isyAxisLogScale\",\r",
							"        \"isxAxisCategorical\",\r",
							"        \"isyAxisCategorical\"\r",
							"      ]\r",
							"    },\r",
							"    \"extractionState\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"precision\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"extraColumns\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": false,\r",
							"            \"additionalProperties\": false\r",
							"          },\r",
							"          \"additionalItems\": false\r",
							"        },\r",
							"        \"isCalibrated\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"showVariability\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"variabilityType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isAsymmetricalBar\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"showConfidenceInterval\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isVariabilityCalculateFromTopBar\": {\r",
							"          \"type\": \"boolean\"\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"precision\",\r",
							"        \"extraColumns\",\r",
							"        \"isCalibrated\",\r",
							"        \"showVariability\",\r",
							"        \"variabilityType\",\r",
							"        \"isAsymmetricalBar\",\r",
							"        \"showConfidenceInterval\",\r",
							"        \"isVariabilityCalculateFromTopBar\"\r",
							"      ]\r",
							"    },\r",
							"    \"figureUrl\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lines\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"points\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"              \"items\": {},\r",
							"              \"additionalItems\": false,\r",
							"              \"additionalProperties\": false\r",
							"            },\r",
							"            \"additionalItems\": false\r",
							"          },\r",
							"          \"normalizePoints\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"              \"items\": {},\r",
							"              \"additionalItems\": false,\r",
							"              \"additionalProperties\": false\r",
							"            },\r",
							"            \"additionalItems\": false\r",
							"          },\r",
							"          \"labels\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"lineName\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"status\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"lineNumber\": {\r",
							"                \"type\": \"integer\"\r",
							"              }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"              \"lineName\",\r",
							"              \"status\",\r",
							"              \"lineNumber\"\r",
							"            ]\r",
							"          },\r",
							"          \"id\": {\r",
							"            \"type\": \"string\"\r",
							"          }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"          \"points\",\r",
							"          \"normalizePoints\",\r",
							"          \"labels\",\r",
							"          \"id\"\r",
							"        ]\r",
							"      },\r",
							"      \"additionalItems\": false\r",
							"    },\r",
							"    \"mouseState\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"x\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"y\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"normX\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"normY\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"isMouseDown\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"zoom\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"selectedPointId\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"pointColor\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lineColor\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"x\",\r",
							"        \"y\",\r",
							"        \"normX\",\r",
							"        \"normY\",\r",
							"        \"isMouseDown\",\r",
							"        \"zoom\",\r",
							"        \"selectedPointId\",\r",
							"        \"pointColor\",\r",
							"        \"lineColor\"\r",
							"      ]\r",
							"    },\r",
							"    \"eraserState\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"x\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"y\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"radius\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"x\",\r",
							"        \"y\",\r",
							"        \"radius\"\r",
							"      ]\r",
							"    },\r",
							"    \"selectedLineId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"toolbarState\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"table\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"type\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"order\": {\r",
							"            \"type\": \"integer\"\r",
							"          },\r",
							"          \"cHeader\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"description\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"dType\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"cType\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"          }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"          \"id\",\r",
							"          \"name\",\r",
							"          \"type\",\r",
							"          \"order\",\r",
							"          \"cHeader\",\r",
							"          \"description\",\r",
							"          \"dType\",\r",
							"          \"cType\",\r",
							"          \"createdAt\",\r",
							"          \"updatedAt\",\r",
							"          \"deletedAt\"\r",
							"        ]\r",
							"      },\r",
							"      \"additionalItems\": false\r",
							"    }\r",
							"  },\r",
							"  \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"extractionPlotId\",\r",
							"    \"plotAxisData\",\r",
							"    \"extractionState\",\r",
							"    \"figureUrl\",\r",
							"    \"lines\",\r",
							"    \"mouseState\",\r",
							"    \"eraserState\",\r",
							"    \"selectedLineId\",\r",
							"    \"toolbarState\",\r",
							"    \"table\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Check if extractionPlotId exists\", () => {\r",
							"    pm.expect(jsonData).to.have.property('extractionPlotId').that.is.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check plotAxisData structure\", () => {\r",
							"    const plotAxisData = jsonData.plotAxisData;\r",
							"    pm.expect(plotAxisData).to.have.all.keys('xMax', 'xMin', 'yMax', 'yMin', 'xUnit', 'yUnit', 'xLabel', 'yLabel', 'xAxisRef', 'yAxisRef', 'isxAxisLogScale', 'isyAxisLogScale', 'isxAxisCategorical', 'isyAxisCategorical');\r",
							"    pm.expect(plotAxisData.xMax).to.be.a('number');\r",
							"    pm.expect(plotAxisData.xMin).to.be.a('number');\r",
							"    pm.expect(plotAxisData.yMax).to.be.a('number');\r",
							"    pm.expect(plotAxisData.yMin).to.be.a('number');\r",
							"    pm.expect(plotAxisData.xUnit).to.be.a('string');\r",
							"    pm.expect(plotAxisData.yUnit).to.be.a('string');\r",
							"    pm.expect(plotAxisData.xLabel).to.be.a('string');\r",
							"    pm.expect(plotAxisData.yLabel).to.be.a('string');\r",
							"    pm.expect(plotAxisData.xAxisRef).to.be.a('string');\r",
							"    pm.expect(plotAxisData.yAxisRef).to.be.a('string');\r",
							"    pm.expect(plotAxisData.isxAxisLogScale).to.be.a('boolean');\r",
							"    pm.expect(plotAxisData.isyAxisLogScale).to.be.a('boolean');\r",
							"    pm.expect(plotAxisData.isxAxisCategorical).to.be.a('boolean');\r",
							"    pm.expect(plotAxisData.isyAxisCategorical).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Check extractionState structure\", () => {\r",
							"    const extractionState = jsonData.extractionState;\r",
							"    pm.expect(extractionState).to.have.all.keys('precision', 'extraColumns', 'isCalibrated', 'showVariability', 'variabilityType', 'isAsymmetricalBar', 'showConfidenceInterval', 'isVariabilityCalculateFromTopBar');\r",
							"    pm.expect(extractionState.precision).to.be.a('number');\r",
							"    pm.expect(extractionState.extraColumns).to.be.an('array');\r",
							"    pm.expect(extractionState.isCalibrated).to.be.a('boolean');\r",
							"    pm.expect(extractionState.showVariability).to.be.a('boolean');\r",
							"    pm.expect(extractionState.variabilityType).to.be.a('string');\r",
							"    pm.expect(extractionState.isAsymmetricalBar).to.be.a('boolean');\r",
							"    pm.expect(extractionState.showConfidenceInterval).to.be.a('boolean');\r",
							"    pm.expect(extractionState.isVariabilityCalculateFromTopBar).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Check if figureUrl is a valid URL\", () => {\r",
							"    pm.expect(jsonData.figureUrl).to.be.a('string').and.to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Check lines structure\", () => {\r",
							"    const lines = jsonData.lines;\r",
							"    pm.expect(lines).to.be.an('array').that.is.not.empty;\r",
							"    lines.forEach(line => {\r",
							"        pm.expect(line).to.have.all.keys('points', 'normalizePoints', 'labels', 'id');\r",
							"        pm.expect(line.points).to.be.an('array');\r",
							"        pm.expect(line.normalizePoints).to.be.an('array');\r",
							"        pm.expect(line.labels).to.have.all.keys('lineName', 'status', 'lineNumber');\r",
							"        pm.expect(line.labels.lineName).to.be.a('string');\r",
							"        pm.expect(line.labels.status).to.be.a('string');\r",
							"        pm.expect(line.labels.lineNumber).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Check mouseState structure\", () => {\r",
							"    const mouseState = jsonData.mouseState;\r",
							"    pm.expect(mouseState).to.have.all.keys('x', 'y', 'normX', 'normY', 'isMouseDown', 'zoom', 'selectedPointId', 'pointColor', 'lineColor');\r",
							"    pm.expect(mouseState.x).to.be.a('number');\r",
							"    pm.expect(mouseState.y).to.be.a('number');\r",
							"    pm.expect(mouseState.normX).to.be.a('number');\r",
							"    pm.expect(mouseState.normY).to.be.a('number');\r",
							"    pm.expect(mouseState.isMouseDown).to.be.a('boolean');\r",
							"    pm.expect(mouseState.zoom).to.be.a('number');\r",
							"    pm.expect(mouseState.pointColor).to.be.a('string');\r",
							"    pm.expect(mouseState.lineColor).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check eraserState structure\", () => {\r",
							"    const eraserState = jsonData.eraserState;\r",
							"    pm.expect(eraserState).to.have.all.keys('x', 'y', 'radius');\r",
							"    pm.expect(eraserState.x).to.be.a('number');\r",
							"    pm.expect(eraserState.y).to.be.a('number');\r",
							"    pm.expect(eraserState.radius).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Check table structure\", () => {\r",
							"    const table = jsonData.table;\r",
							"    pm.expect(table).to.be.an('array').that.is.not.empty;\r",
							"    table.forEach(item => {\r",
							"        pm.expect(item).to.have.all.keys('id', 'name', 'type', 'order', 'cHeader', 'description', 'dType', 'cType', 'createdAt', 'updatedAt', 'deletedAt');\r",
							"        pm.expect(item.id).to.be.a('string');\r",
							"        pm.expect(item.name).to.be.a('string');\r",
							"        pm.expect(item.type).to.be.a('string');\r",
							"        pm.expect(item.order).to.be.a('number');\r",
							"        pm.expect(item.cHeader).to.be.a('string');\r",
							"        pm.expect(item.description).to.be.a('string');\r",
							"        pm.expect(item.dType).to.be.a('string');\r",
							"        pm.expect(item.cType).to.be.a('string');\r",
							"        pm.expect(item.createdAt).to.be.a('string');\r",
							"        pm.expect(item.updatedAt).to.be.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/plot/get-by-eid/:extractionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"plot",
						"get-by-eid",
						":extractionId"
					],
					"variable": [
						{
							"key": "extractionId",
							"value": "{{extractionId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create line data for the plot Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let epLineId = jsonData.id;\r",
							"console.log(epLineId);\r",
							"pm.environment.set(\"epLineId\", epLineId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"plotId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"labels\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"lineName\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"lineNumber\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"lineName\",\r",
							"                \"lineNumber\",\r",
							"                \"status\"\r",
							"            ]\r",
							"        },\r",
							"        \"points\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": false\r",
							"        },\r",
							"        \"normalizePoints\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {},\r",
							"            \"additionalItems\": false\r",
							"        },\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"plotId\",\r",
							"        \"labels\",\r",
							"        \"points\",\r",
							"        \"normalizePoints\",\r",
							"        \"id\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains valid JSON\", () => {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains plotId\", () => {\r",
							"    pm.expect(jsonData.plotId).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains labels with lineName, lineNumber, and status\", () => {\r",
							"    pm.expect(jsonData.labels).to.have.all.keys('lineName', 'lineNumber', 'status');\r",
							"    pm.expect(jsonData.labels.lineName).to.be.a('string');\r",
							"    pm.expect(jsonData.labels.lineNumber).to.be.a('number');\r",
							"    pm.expect(jsonData.labels.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response points array is empty or valid\", () => {\r",
							"    pm.expect(jsonData.points).to.be.an('array');\r",
							"    pm.expect(jsonData.points.length).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response normalizePoints array is empty or valid\", () => {\r",
							"    pm.expect(jsonData.normalizePoints).to.be.an('array');\r",
							"    pm.expect(jsonData.normalizePoints.length).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response id is a valid UUID\", () => {\r",
							"    pm.expect(jsonData.id).to.match(/[0-9a-fA-F-]{36}/);  // Check if the ID is a valid UUID\r",
							"});\r",
							"\r",
							"pm.test(\"Response createdAt and updatedAt are present and in correct format\", function () {\r",
							"    pm.expect(jsonData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);  // ISO 8601 format\r",
							"    pm.expect(jsonData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);  // ISO 8601 format\r",
							"});\r",
							"\r",
							"pm.test(\"Response deletedAt is null or valid\", () => {\r",
							"\r",
							"    pm.expect(jsonData.deletedAt).to.be.oneOf([null, '']);  // deletedAt can be null or an empty string\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"extractionPlotId\": \"{{extractionPlotId}}\",\r\n    \"storedPoints\": {\r\n        \"x\": 100,\r\n        \"y\": 200\r\n    },\r\n    \"storedNormalizedPoints\": {\r\n        \"x\": 0.5,\r\n        \"y\": 0.5\r\n    },\r\n    \"lineNumber\": 1,\r\n    \"lineName\": \"Sample Line Name\",\r\n    \"labels\": {\r\n        \"label1\": \"value1\"\r\n    },\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/plot/create-line",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"plot",
						"create-line"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save multiple line data for the plot Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"extractionId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"extractionState\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"isAsymmetricalBar\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isCalibrated\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isVariabilityCalculateFromTopBar\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"showConfidenceInterval\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"showVariability\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"extraColumns\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {}\r",
							"        },\r",
							"        \"precision\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"variabilityType\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"isAsymmetricalBar\",\r",
							"        \"isCalibrated\",\r",
							"        \"isVariabilityCalculateFromTopBar\",\r",
							"        \"showConfidenceInterval\",\r",
							"        \"showVariability\",\r",
							"        \"extraColumns\",\r",
							"        \"precision\",\r",
							"        \"variabilityType\"\r",
							"      ]\r",
							"    },\r",
							"    \"plotAxisData\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"xAxisRef\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"yAxisRef\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"xLabel\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"yLabel\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"xMax\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"xMin\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"yMax\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"yMin\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"xUnit\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"yUnit\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isxAxisCategorical\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isyAxisCategorical\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isxAxisLogScale\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"isyAxisLogScale\": {\r",
							"          \"type\": \"boolean\"\r",
							"        }\r",
							"      },\r",
							"      \"additionalProperties\": false,\r",
							"      \"required\": [\r",
							"        \"xAxisRef\",\r",
							"        \"yAxisRef\",\r",
							"        \"xLabel\",\r",
							"        \"yLabel\",\r",
							"        \"xMax\",\r",
							"        \"xMin\",\r",
							"        \"yMax\",\r",
							"        \"yMin\",\r",
							"        \"xUnit\",\r",
							"        \"yUnit\",\r",
							"        \"isxAxisCategorical\",\r",
							"        \"isyAxisCategorical\",\r",
							"        \"isxAxisLogScale\",\r",
							"        \"isyAxisLogScale\"\r",
							"      ]\r",
							"    },\r",
							"    \"extraColumns\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {}\r",
							"    },\r",
							"    \"figureUrl\": {\r",
							"      \"type\": \"null\"\r",
							"    },\r",
							"    \"createdAt\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"updatedAt\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"deletedAt\": {\r",
							"      \"type\": \"null\"\r",
							"    },\r",
							"    \"lines\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {}\r",
							"    }\r",
							"  },\r",
							"  \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"extractionId\",\r",
							"    \"extractionState\",\r",
							"    \"plotAxisData\",\r",
							"    \"extraColumns\",\r",
							"    \"figureUrl\",\r",
							"    \"createdAt\",\r",
							"    \"updatedAt\",\r",
							"    \"deletedAt\",\r",
							"    \"lines\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Root-level properties validation\", () => {\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.extractionId).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.extractionState).to.be.a(\"object\");\r",
							"    pm.expect(jsonData.plotAxisData).to.be.a(\"object\");\r",
							"    pm.expect(jsonData.lines).to.be.an(\"array\", \"Lines should be an array\");\r",
							"});\r",
							"\r",
							"pm.test(\"ExtractionState validation\", () => {\r",
							"    let extractionState = jsonData.extractionState;\r",
							"    pm.expect(extractionState).to.be.an(\"object\", \"ExtractionState should be an object\");\r",
							"    pm.expect(extractionState).to.have.property(\"isAsymmetricalBar\");\r",
							"    pm.expect(extractionState).to.have.property(\"isCalibrated\");\r",
							"    pm.expect(extractionState).to.have.property(\"isVariabilityCalculateFromTopBar\");\r",
							"    pm.expect(extractionState).to.have.property(\"showConfidenceInterval\");\r",
							"    pm.expect(extractionState).to.have.property(\"showVariability\");\r",
							"    pm.expect(extractionState).to.have.property(\"precision\");\r",
							"    pm.expect(extractionState).to.have.property(\"variabilityType\");\r",
							"    pm.expect(extractionState.extraColumns).to.be.an(\"array\", \"ExtraColumns should be an array\");\r",
							"});\r",
							"\r",
							"pm.test(\"PlotAxisData validation\", () => {\r",
							"    let plotAxisData = jsonData.plotAxisData;\r",
							"    pm.expect(plotAxisData).to.be.an(\"object\", \"PlotAxisData should be an object\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"xAxisRef\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"yAxisRef\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"xLabel\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"yLabel\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"xMax\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"xMin\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"yMax\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"yMin\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"xUnit\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"yUnit\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"isxAxisCategorical\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"isyAxisCategorical\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"isxAxisLogScale\");\r",
							"    pm.expect(plotAxisData).to.have.property(\"isyAxisLogScale\");\r",
							"});\r",
							"\r",
							"jsonData.lines.forEach((line, index) => {\r",
							"    pm.test(`Line ${index + 1} validation`, () => {\r",
							"        pm.expect(line).to.have.property(\"id\");\r",
							"        pm.expect(line).to.have.property(\"plotId\");\r",
							"        pm.expect(line).to.have.property(\"points\");\r",
							"        pm.expect(line).to.have.property(\"normalizePoints\");\r",
							"        pm.expect(line).to.have.property(\"labels\");\r",
							"        pm.expect(line.labels).to.be.an(\"object\", \"Labels should be an object\");\r",
							"        pm.expect(line).to.have.property(\"createdAt\");\r",
							"        pm.expect(line).to.have.property(\"updatedAt\");\r",
							"        pm.expect(line.points).to.be.an(\"array\", \"Points should be an array\");\r",
							"        pm.expect(line.normalizePoints).to.be.an(\"array\", \"NormalizePoints should be an array\");\r",
							"    });\r",
							"\r",
							"    line.points.forEach((point, pointIndex) => {\r",
							"        pm.test(`Line ${index + 1}, Point ${pointIndex + 1} validation`, () => {\r",
							"            pm.expect(point).to.have.property(\"x\");\r",
							"            pm.expect(point).to.have.property(\"y\");\r",
							"            pm.expect(point).to.have.property(\"id\");\r",
							"            pm.expect(point).to.have.property(\"label\");\r",
							"            pm.expect(point).to.have.property(\"extraColumns\");\r",
							"            pm.expect(point.extraColumns).to.be.an(\"object\", \"ExtraColumns should be an object\");\r",
							"        });\r",
							"    });\r",
							"\r",
							"    line.normalizePoints.forEach((normalizedPoint, normIndex) => {\r",
							"        pm.test(`Line ${index + 1}, NormalizePoint ${normIndex + 1} validation`, () => {\r",
							"            pm.expect(normalizedPoint).to.have.property(\"x\");\r",
							"            pm.expect(normalizedPoint).to.have.property(\"y\");\r",
							"            pm.expect(normalizedPoint).to.have.property(\"uci\");\r",
							"            pm.expect(normalizedPoint).to.have.property(\"lci\");\r",
							"            pm.expect(normalizedPoint).to.have.property(\"var\");\r",
							"            pm.expect(normalizedPoint).to.have.property(\"id\");\r",
							"            pm.expect(normalizedPoint).to.have.property(\"extraColumns\");\r",
							"            pm.expect(normalizedPoint.extraColumns).to.be.an(\"object\", \"ExtraColumns should be an object\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"extractionPlotId\": \"{{extractionPlotId}}\",\r\n  \"plotAxisData\": {\r\n    \"xAxisRef\": \"x\",\r\n    \"yAxisRef\": \"y\",\r\n    \"xLabel\": \"Time (s)\",\r\n    \"yLabel\": \"Amplitude (m)\",\r\n    \"xMax\": 10,\r\n    \"xMin\": 0,\r\n    \"yMax\": 100,\r\n    \"yMin\": 0,\r\n    \"xUnit\": \"seconds\",\r\n    \"yUnit\": \"meters\",\r\n    \"isxAxisCategorical\": false,\r\n    \"isyAxisCategorical\": false,\r\n    \"isxAxisLogScale\": false,\r\n    \"isyAxisLogScale\": false\r\n  },\r\n  \"lines\": [\r\n    {\r\n      \"id\": \"{{epLineId}}\",\r\n      \"points\": [\r\n        {\r\n          \"x\": 1,\r\n          \"y\": 2,\r\n          \"label\": \"xmin\",\r\n          \"topBarPixelDistance\": 5,\r\n          \"bottomBarPixelDistance\": 5,\r\n          \"deviationPixelDistance\": 0.5,\r\n          \"id\": \"point-1\",\r\n          \"extraColumns\": {\r\n            \"columnA\": 5\r\n          }\r\n        }\r\n      ],\r\n      \"normalizePoints\": [\r\n        {\r\n          \"x\": 1,\r\n          \"y\": 2.5,\r\n          \"uci\": \"na\",\r\n          \"lci\": \"na\",\r\n          \"var\": \"na\",\r\n          \"id\": \"point-1\",\r\n          \"extraColumns\": {\r\n            \"columnA\": 5\r\n          }\r\n        }\r\n      ],\r\n      \"labels\": {\r\n        \"lineName\": \"line-1\",\r\n        \"status\": \"not_started\",\r\n        \"lineNumber\": 1\r\n      }\r\n    }\r\n  ],\r\n  \"extractionState\": {\r\n    \"isAsymmetricalBar\": false,\r\n    \"isCalibrated\": false,\r\n    \"isVariabilityCalculateFromTopBar\": false,\r\n    \"showConfidenceInterval\": false,\r\n    \"showVariability\": true,\r\n    \"extraColumns\": [\r\n      \"column1\",\r\n      \"column2\"\r\n    ],\r\n    \"precision\": 6,\r\n    \"variabilityType\": \"sd\"\r\n  },\r\n  \"figureUrl\": \"https://guurrqvfknuowewiklfl.supabase.co/storage/v1/object/public/linkedme/extraction/dda03a6c-3e9f-4cc8-a2c2-2f48c2b4279d/91e3280f-fb4d-4c21-a59f-bc13b0205b77/resized_image_5_nsp9zih2rq2a7cfkrz3etx5w.png\",\r\n  \"mouseState\": {\r\n    \"x\": 100,\r\n    \"y\": 100,\r\n    \"normX\": 100,\r\n    \"normY\": 100,\r\n    \"isMouseDown\": false,\r\n    \"zoom\": 1,\r\n    \"selectedPointId\": null,\r\n    \"pointColor\": \"rgb(0,0,0)\",\r\n    \"lineColor\": \"rgb(0,0,0)\"\r\n  },\r\n  \"eraserState\": {\r\n    \"x\": 0,\r\n    \"y\": 0,\r\n    \"radius\": 10\r\n  },\r\n  \"toolbarState\": \"idle\",\r\n  \"selectedLineId\": \"line-1\",\r\n  \"table\": [\r\n    {\r\n      \"name\": \"column1\",\r\n      \"cType\": \"string\",\r\n      \"cHeader\": \"Column 1\",\r\n      \"description\": \"Description for column 1\",\r\n      \"dType\": \"string\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/plot/save-lines",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"plot",
						"save-lines"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment to Compound Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"let commentId = jsonData.id;\r",
							"console.log(commentId);\r",
							"pm.environment.set(\"commentId\", commentId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"projectId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"comment\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"createdAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedAt\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"deletedAt\": {\r",
							"            \"type\": \"null\"\r",
							"        },\r",
							"        \"user\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"username\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"email\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"isEmailVerified\": {\r",
							"                    \"type\": \"boolean\"\r",
							"                },\r",
							"                \"otp\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"otpTime\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"token\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"tokenTime\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"googleId\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"pictureUrl\": {\r",
							"                    \"type\": \"null\"\r",
							"                },\r",
							"                \"role\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                    \"type\": \"null\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\",\r",
							"                \"username\",\r",
							"                \"email\",\r",
							"                \"isEmailVerified\",\r",
							"                \"otp\",\r",
							"                \"otpTime\",\r",
							"                \"token\",\r",
							"                \"tokenTime\",\r",
							"                \"googleId\",\r",
							"                \"pictureUrl\",\r",
							"                \"role\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\"\r",
							"            ]\r",
							"        },\r",
							"        \"project\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"graphState\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": {},\r",
							"                    \"additionalItems\": false\r",
							"                },\r",
							"                \"description\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"createdAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"updatedAt\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"deletedAt\": {\r",
							"                    \"type\": \"null\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": false,\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"userId\",\r",
							"                \"name\",\r",
							"                \"graphState\",\r",
							"                \"description\",\r",
							"                \"createdAt\",\r",
							"                \"updatedAt\",\r",
							"                \"deletedAt\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"projectId\",\r",
							"        \"userId\",\r",
							"        \"comment\",\r",
							"        \"createdAt\",\r",
							"        \"updatedAt\",\r",
							"        \"deletedAt\",\r",
							"        \"user\",\r",
							"        \"project\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains required fields\", () => {\r",
							"    pm.expect(jsonData).to.have.all.keys('id', 'projectId', 'userId', 'comment', 'createdAt', 'updatedAt', 'deletedAt', 'user', 'project');\r",
							"});\r",
							"\r",
							"pm.test(\"User object has required fields and types\", () => {\r",
							"    pm.expect(jsonData.user).to.have.all.keys(\r",
							"        'id', 'name', 'username', 'email', 'isEmailVerified', 'otp', \r",
							"        'otpTime', 'token', 'tokenTime', 'googleId', 'pictureUrl', \r",
							"        'role', 'createdAt', 'updatedAt', 'deletedAt'\r",
							"    );\r",
							"    pm.expect(jsonData.user.email).to.be.a('string');\r",
							"    pm.expect(jsonData.user.isEmailVerified).to.be.a('boolean');\r",
							"    pm.expect(jsonData.user.role).to.be.oneOf(['PRIVATE_BETA', 'USER', 'ADMIN']); // Role validation\r",
							"});\r",
							"\r",
							"pm.test(\"Project object has required fields and types\", () => {\r",
							"    pm.expect(jsonData.project).to.have.all.keys(\r",
							"        'id', 'userId', 'name', 'graphState', 'description', \r",
							"        'createdAt', 'updatedAt', 'deletedAt'\r",
							"    );\r",
							"    pm.expect(jsonData.project.graphState).to.be.an('array'); // Ensure graphState is an array\r",
							"    pm.expect(jsonData.project.description).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Date fields are in ISO 8601 format\", () => {\r",
							"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
							"    pm.expect(jsonData.createdAt).to.match(dateRegex);\r",
							"    pm.expect(jsonData.updatedAt).to.match(dateRegex);\r",
							"    pm.expect(jsonData.user.createdAt).to.match(dateRegex);\r",
							"    pm.expect(jsonData.user.updatedAt).to.match(dateRegex);\r",
							"    pm.expect(jsonData.project.createdAt).to.match(dateRegex);\r",
							"    pm.expect(jsonData.project.updatedAt).to.match(dateRegex);\r",
							"});\r",
							"\r",
							"pm.test(\"deletedAt field is either null or undefined\", () => {\r",
							"    pm.expect(jsonData.deletedAt).to.be.oneOf([null, undefined]);\r",
							"    pm.expect(jsonData.user.deletedAt).to.be.oneOf([null, undefined]);\r",
							"    pm.expect(jsonData.project.deletedAt).to.be.oneOf([null, undefined]);\r",
							"});\r",
							"\r",
							"pm.test(\"User email is in a valid format\", () => {\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    pm.expect(jsonData.user.email).to.match(emailRegex);\r",
							"});\r",
							"\r",
							"pm.test(\"OTP field is a string and valid format\", () => {\r",
							"    pm.expect(jsonData.user.otp).to.be.a('string');\r",
							"    pm.expect(jsonData.user.otp).to.match(/^\\$2b\\$10\\$.+/); // bcrypt hash validation\r",
							"});\r",
							"\r",
							"pm.test(\"Role is PRIVATE_BETA\", () => {\r",
							"    pm.expect(jsonData.user.role).to.equal(\"PRIVATE_BETA\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"comment\": \"{{$randomLoremSentence}}\",\n  \"projectId\": \"{{newProId}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/feedback/add-comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"feedback",
						"add-comment"
					]
				},
				"description": "Endpoint to add a comment to a compound"
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"comment\": \"<string>\",\n  \"projectId\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/feedback/add-comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feedback",
								"add-comment"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Comments by project ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// let commentId = jsonData.id;\r",
							"// console.log(commentId);\r",
							"// pm.environment.set(\"commentId\", commentId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"projectId\": {\r",
							"                \"type\": \"string\",\r",
							"            },\r",
							"            \"userId\": {\r",
							"                \"type\": \"string\",\r",
							"            },\r",
							"            \"comment\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"createdAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updatedAt\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"deletedAt\": {\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"user\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"username\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"email\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"isEmailVerified\": {\r",
							"                        \"type\": \"boolean\"\r",
							"                    },\r",
							"                    \"otp\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"otpTime\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"token\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"tokenTime\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"googleId\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"pictureUrl\": {\r",
							"                        \"type\": \"null\"\r",
							"                    },\r",
							"                    \"role\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"createdAt\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"updatedAt\": {\r",
							"                        \"type\": \"string\",\r",
							"                    },\r",
							"                    \"deletedAt\": {\r",
							"                        \"type\": \"null\"\r",
							"                    }\r",
							"                },\r",
							"                \"additionalProperties\": false,\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"name\",\r",
							"                    \"username\",\r",
							"                    \"email\",\r",
							"                    \"isEmailVerified\",\r",
							"                    \"otp\",\r",
							"                    \"otpTime\",\r",
							"                    \"token\",\r",
							"                    \"tokenTime\",\r",
							"                    \"googleId\",\r",
							"                    \"pictureUrl\",\r",
							"                    \"role\",\r",
							"                    \"createdAt\",\r",
							"                    \"updatedAt\",\r",
							"                    \"deletedAt\"\r",
							"                ]\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"projectId\",\r",
							"            \"userId\",\r",
							"            \"comment\",\r",
							"            \"createdAt\",\r",
							"            \"updatedAt\",\r",
							"            \"deletedAt\",\r",
							"            \"user\"\r",
							"        ]\r",
							"    },\r",
							"    \"additionalItems\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// Test: Validate response is an array\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.above(0); // Ensure the array is not empty\r",
							"});\r",
							"\r",
							"// Define reusable validation functions\r",
							"function validateObject(obj) {\r",
							"    pm.test(\"Object contains required fields\", () => {\r",
							"        pm.expect(obj).to.have.all.keys(\r",
							"            \"id\", \"projectId\", \"userId\", \"comment\", \"createdAt\",\r",
							"            \"updatedAt\", \"deletedAt\", \"user\"\r",
							"        );\r",
							"    });\r",
							"\r",
							"    pm.test(\"Date fields are in ISO 8601 format\", () => {\r",
							"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
							"        pm.expect(obj.createdAt).to.match(dateRegex);\r",
							"        pm.expect(obj.updatedAt).to.match(dateRegex);\r",
							"        if (obj.deletedAt !== null) {\r",
							"            pm.expect(obj.deletedAt).to.match(dateRegex);\r",
							"        }\r",
							"    });\r",
							"\r",
							"    pm.test(\"Comment is a valid string\", () => {\r",
							"        pm.expect(obj.comment).to.be.a(\"string\").and.to.have.length.above(0);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Project and User IDs are valid UUIDs\", () => {\r",
							"        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r",
							"        pm.expect(obj.id).to.match(uuidRegex);\r",
							"        pm.expect(obj.projectId).to.match(uuidRegex);\r",
							"        pm.expect(obj.userId).to.match(uuidRegex);\r",
							"    });\r",
							"\r",
							"    // Validate nested user object\r",
							"    pm.test(\"User object contains required fields\", () => {\r",
							"        pm.expect(obj.user).to.have.all.keys(\r",
							"            \"id\", \"name\", \"username\", \"email\", \"isEmailVerified\",\r",
							"            \"otp\", \"otpTime\", \"token\", \"tokenTime\", \"googleId\",\r",
							"            \"pictureUrl\", \"role\", \"createdAt\", \"updatedAt\", \"deletedAt\"\r",
							"        );\r",
							"    });\r",
							"\r",
							"    pm.test(\"User email is valid\", () => {\r",
							"        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"        pm.expect(obj.user.email).to.match(emailRegex);\r",
							"    });\r",
							"\r",
							"    pm.test(\"User role is valid\", () => {\r",
							"        pm.expect(obj.user.role).to.be.oneOf([\"PRIVATE_BETA\", \"USER\", \"ADMIN\"]);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Optional fields in user object are null or valid\", () => {\r",
							"        pm.expect(obj.user.name).to.be.oneOf([null, undefined]);\r",
							"        pm.expect(obj.user.pictureUrl).to.be.oneOf([null, undefined]);\r",
							"        pm.expect(obj.user.token).to.be.oneOf([null, undefined]);\r",
							"    });\r",
							"\r",
							"    pm.test(\"User dates are valid ISO strings\", () => {\r",
							"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
							"        pm.expect(obj.user.createdAt).to.match(dateRegex);\r",
							"        pm.expect(obj.user.updatedAt).to.match(dateRegex);\r",
							"        if (obj.user.deletedAt !== null) {\r",
							"            pm.expect(obj.user.deletedAt).to.match(dateRegex);\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"jsonData.forEach((item, index) => {\r",
							"    pm.test(`Validate item at index ${index}`, () => {\r",
							"        validateObject(item);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/feedback/:id/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"feedback",
						":id",
						"comments"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to get all comments by project ID"
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/feedback/:id/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feedback",
								":id",
								"comments"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete comments Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response contains 'msg' field\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"msg\");\r",
							"});\r",
							"\r",
							"pm.test(\"Message confirms successful deletion\", () => {\r",
							"    const messageRegex = /^Comment with [0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12} was deleted successfully$/;\r",
							"    pm.expect(jsonData.msg).to.match(messageRegex);\r",
							"});\r",
							"\r",
							"pm.test(\"Extract and validate comment ID\", () => {\r",
							"    const commentIdRegex = /[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/;\r",
							"    const match = jsonData.msg.match(commentIdRegex);\r",
							"    pm.expect(match).to.not.be.null;\r",
							"    pm.environment.set(\"deletedCommentId\", match[0]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/feedback/:id/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"feedback",
						":id",
						"comment"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{commentId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to Delete comments"
			},
			"response": [
				{
					"name": "Untitled Response",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/feedback/:id/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feedback",
								":id",
								"comment"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a single line by ID Copy",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/plot/delete-line/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						"plot",
						"delete-line",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{epLineId}}",
							"description": "(Required) The ID of the line to be deleted"
						}
					]
				}
			},
			"response": [
				{
					"name": "Line deleted successfully.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/delete-line/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"delete-line",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{}"
				},
				{
					"name": "Line not found.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/delete-line/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								"delete-line",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete an extraction by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let extractionId = jsonData.id;\r",
							"\r",
							"console.log(extractionId);\r",
							"pm.environment.set(\"extractionTypeID\", extractionId);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"message\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/:id/delete-extraction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						":id",
						"delete-extraction"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{extractionId}}",
							"description": "(Required) UUID of the extraction"
						}
					]
				}
			},
			"response": [
				{
					"name": "Extraction successfully deleted.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/delete-extraction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"delete-extraction"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"<string>\"\n}"
				},
				{
					"name": "Extraction not found.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/delete-extraction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"delete-extraction"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete table structure by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false,\r",
							"    \"required\": [\r",
							"        \"message\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating Schema to give proper responses\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/:id/delete-table-structure",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						":id",
						"delete-table-structure"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{tableId}}",
							"description": "(Required) UUID of the table structure"
						}
					]
				}
			},
			"response": [
				{
					"name": "Table structure successfully deleted.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/delete-table-structure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"delete-table-structure"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"<string>\"\n}"
				},
				{
					"name": "Table structure not found.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/delete-table-structure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"delete-table-structure"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a type by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/extractions/:id/delete-type",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"extractions",
						":id",
						"delete-type"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{typeId}}",
							"description": "(Required) UUID of the type"
						}
					]
				}
			},
			"response": [
				{
					"name": "Type successfully deleted.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/delete-type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"delete-type"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"<string>\"\n}"
				},
				{
					"name": "Type not found.",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/extractions/:id/delete-type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"extractions",
								":id",
								"delete-type"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a project by ID_Done Copy",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/projects/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"projects",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{newProId}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Endpoint to delete a project by ID"
			},
			"response": [
				{
					"name": "Project deleted successfully",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Project not found",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/projects/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function generateRandomData() {\r",
					"    const types = ['string', 'number', 'boolean', 'object'];\r",
					"\r",
					"    const lastType = pm.globals.get('randomDataType');\r",
					"\r",
					"    const availableTypes = types.filter(type => type !== lastType);\r",
					"\r",
					"    const randomType = availableTypes[Math.floor(Math.random() * availableTypes.length)];\r",
					"\r",
					"    let randomData;\r",
					"\r",
					"    switch (randomType) {\r",
					"        case 'string':\r",
					"            randomData = Math.random().toString(36).substring(7);\r",
					"            break;\r",
					"        case 'number':\r",
					"            randomData = Math.floor(Math.random() * 1000);\r",
					"            break;\r",
					"        case 'boolean':\r",
					"            randomData = Math.random() < 0.5;\r",
					"            break;\r",
					"        case 'object':\r",
					"            randomData = { key: Math.random().toString(36).substring(7) };\r",
					"            break;\r",
					"        default:\r",
					"            randomData = null;\r",
					"    }\r",
					"\r",
					"    return { type: randomType, value: randomData };\r",
					"}\r",
					"\r",
					"const randomData = generateRandomData();\r",
					"\r",
					"pm.globals.set('randomDataType', randomData.type);\r",
					"pm.globals.set('randomDataValue', JSON.stringify(randomData.value));\r",
					"\r",
					"console.log(`Generated random data of type ${randomData.type}:`, randomData.value);\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var jsonData = pm.response.json();\r",
					"const codeResponse = pm.response.code;\r",
					"const timeResponse = pm.response.responseTime;\r",
					"let headers = pm.response.headers;\r",
					"\r",
					"const acceptableCodes = [200, 201, 202, 204];\r",
					"\r",
					"pm.test(\"Validate response status code\", () => {\r",
					"    if (acceptableCodes.includes(codeResponse)) {\r",
					"        pm.expect(acceptableCodes).to.include(codeResponse, `Response code is acceptable: ${codeResponse}`);\r",
					"    } else {\r",
					"        throw new Error(`Unexpected status code: ${codeResponse}. Acceptable codes: ${acceptableCodes.join(\", \")}`);\r",
					"    }\r",
					"});\r",
					"\r",
					"pm.test(\"Status code should not be between 400 and 500\", () => {\r",
					"    pm.expect(codeResponse).to.not.be.within(400, 500);\r",
					"});\r",
					"\r",
					"pm.test(\"Validate response headers\", () => {\r",
					"    let responseBody = pm.response.text();\r",
					"\r",
					"    pm.expect(headers.get(\"Server\"), \"Server header should be 'openresty'\").to.eql(\"openresty\");\r",
					"\r",
					"    pm.expect(headers.get(\"Date\"), \"Date header should exist\").to.exist;\r",
					"    let dateHeader = headers.get(\"Date\");\r",
					"    let dateRegex = /^[a-zA-Z]{3}, \\d{2} [a-zA-Z]{3} \\d{4} \\d{2}:\\d{2}:\\d{2} GMT$/;\r",
					"    pm.expect(dateHeader, `Date header format is incorrect: ${dateHeader}`).to.match(dateRegex);\r",
					"\r",
					"    pm.expect(headers.get(\"Content-Type\"), \"Content-Type header should match 'application/json; charset=utf-8'\")\r",
					"        .to.eql(\"application/json; charset=utf-8\");\r",
					"\r",
					"    pm.expect(headers.get(\"Content-Length\"), \"Content-Length header should match the actual response length\")\r",
					"        .to.eql(responseBody.length.toString());\r",
					"\r",
					"    pm.expect(headers.get(\"Connection\"), \"Connection header should be 'keep-alive'\").to.eql(\"keep-alive\");\r",
					"\r",
					"    pm.expect(headers.get(\"X-Powered-By\"), \"X-Powered-By header should be 'Express'\").to.eql(\"Express\");\r",
					"\r",
					"    pm.expect(headers.get(\"Vary\"), \"Vary header should be 'Origin'\").to.eql(\"Origin\");\r",
					"\r",
					"    let etagHeader = headers.get(\"ETag\");\r",
					"    pm.expect(etagHeader, `ETag header format is incorrect: ${etagHeader}`).to.match(/^W\\/\".+\"$/);\r",
					"});\r",
					"\r",
					""
				]
			}
		}
	]
}